{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pensamiento Computacional Benvenidos a la documentaci\u00f3n oficial de la catedra para la instalaci\u00f3n y correcto setup de su entorno de desarrollo! Primeros Pasos Por favor, primero deben ver la gu\u00eda acorde a su sistema operativo para instalar Python. La gu\u00eda se encuentra disponible para MacOS y Windows. En caso de estar utilizando un sistema Linux, recomendamos ver la secci\u00f3n de instalaci\u00f3n de Python de la gu\u00eda para windows dado que la misma utiliza WSL para simular un entorno Linux. MacOS Windows Material de tutoriales: Los ejercicios resueltos en clases tutoriales podr\u00e1n encontrarse en el siguiente link : Entorno de desarrollo: Luego de instalar correctamente el entorno de Python que utilizaremos, vamos a seguir por el setup del entorno de desarrollo utilizando VS Code. En el \u00faltimo paso de la gu\u00eda anterior, instalamos dicho programa y vimos que es un simple editor de texto (una versi\u00f3n con esteroides de notepad para los que tiene Windows) Durante toda la cursada vamos a ver muchas de las propiedades y ventajas que tiene este editor, pero por el momento intentemos tener un entorno de desarrollo m\u00ednimo que nos permita hacer un Hello World . Note En programaci\u00f3n, se acostumbra escribir un programa que muestre por pantalla la frase Hello World cuando reci\u00e9n arrancamos con un lenguaje nuevo. Es una tradci\u00f3n arbitraria que no tiene mucho sentido m\u00e1s que poder ver la funcionalidad b\u00e1sica del lenguaje y su sintaxis. Primera vista: Si abrimos el programa, seguramente encontremos una primera pantalla muy parecida a la siguiente: Es importante destacar las secciones del editor: La secci\u00f3n resaltada en verde (pantalla principal), es donde se vizualizar\u00e1n los docuemntos abiertos. Cuando abirmos el programa, no tenemos ning\u00fan documento abierto por lo que dicha secci\u00f3n muestra un mensaje de bienvenida. Luego tenemos la columna derecha con sus iconos resaltados en amarillo. Esta secci\u00f3n es la que contiene las distintas funcionalidades del editor y vamos a ir analizando cada una m\u00e1s en detalle m\u00e1s adelante. Finalmente, tenemos la esquina inferior izquierda que representa la parte de configuraci\u00f3n. Si encesitamos hacer cambios en la tipograf\u00eda, los hot-keys o dem\u00e1s, se hace desde esta secci\u00f3n.","title":"Home"},{"location":"#pensamiento-computacional","text":"Benvenidos a la documentaci\u00f3n oficial de la catedra para la instalaci\u00f3n y correcto setup de su entorno de desarrollo!","title":"Pensamiento Computacional"},{"location":"#primeros-pasos","text":"Por favor, primero deben ver la gu\u00eda acorde a su sistema operativo para instalar Python. La gu\u00eda se encuentra disponible para MacOS y Windows. En caso de estar utilizando un sistema Linux, recomendamos ver la secci\u00f3n de instalaci\u00f3n de Python de la gu\u00eda para windows dado que la misma utiliza WSL para simular un entorno Linux. MacOS Windows","title":"Primeros Pasos"},{"location":"#material-de-tutoriales","text":"Los ejercicios resueltos en clases tutoriales podr\u00e1n encontrarse en el siguiente link :","title":"Material de tutoriales:"},{"location":"#entorno-de-desarrollo","text":"Luego de instalar correctamente el entorno de Python que utilizaremos, vamos a seguir por el setup del entorno de desarrollo utilizando VS Code. En el \u00faltimo paso de la gu\u00eda anterior, instalamos dicho programa y vimos que es un simple editor de texto (una versi\u00f3n con esteroides de notepad para los que tiene Windows) Durante toda la cursada vamos a ver muchas de las propiedades y ventajas que tiene este editor, pero por el momento intentemos tener un entorno de desarrollo m\u00ednimo que nos permita hacer un Hello World . Note En programaci\u00f3n, se acostumbra escribir un programa que muestre por pantalla la frase Hello World cuando reci\u00e9n arrancamos con un lenguaje nuevo. Es una tradci\u00f3n arbitraria que no tiene mucho sentido m\u00e1s que poder ver la funcionalidad b\u00e1sica del lenguaje y su sintaxis.","title":"Entorno de desarrollo:"},{"location":"#primera-vista","text":"Si abrimos el programa, seguramente encontremos una primera pantalla muy parecida a la siguiente: Es importante destacar las secciones del editor: La secci\u00f3n resaltada en verde (pantalla principal), es donde se vizualizar\u00e1n los docuemntos abiertos. Cuando abirmos el programa, no tenemos ning\u00fan documento abierto por lo que dicha secci\u00f3n muestra un mensaje de bienvenida. Luego tenemos la columna derecha con sus iconos resaltados en amarillo. Esta secci\u00f3n es la que contiene las distintas funcionalidades del editor y vamos a ir analizando cada una m\u00e1s en detalle m\u00e1s adelante. Finalmente, tenemos la esquina inferior izquierda que representa la parte de configuraci\u00f3n. Si encesitamos hacer cambios en la tipograf\u00eda, los hot-keys o dem\u00e1s, se hace desde esta secci\u00f3n.","title":"Primera vista:"},{"location":"installation/mac-install/","text":"MacOS Python Installation Esta secci\u00f3n es una gu\u00eda para generar un entorno de desarrollo necesario para el curso de pensamiento computacional el cual constar\u00e1 de los siguientes recursos: Homebrew como package manager Pyenv como manejador de versiones de Python VS Code como editor de texto Al finalizar esta gu\u00eda contaremos con un editor de texto y el interprete de Python correspondiente para esta materia. Utilizaremos Python en su versi\u00f3n 3.8.13 por lo que es importante seguir estos pasos para hacer un correcto setup. Info En este tutorial hablaremos de la Terminal , esto es un programa especial que viene inclu\u00eddo dentro de nuestra computadora y se utiliza para interactuar con nuestro sistema operativo. Antes que existieran las Graphical User Interfaces, la gente utilizaba estas terminales de texto para utilizar la computadora. Siempre que escuchemos CLI , tenemos que recordar que esto se refiere al termino Command Line Interface. Lo cual hace referencia a aquella \u00e9poca en la que la gente se comunicaba con la computadora utilizando la terminal. Entonces si un programa debe tener una CLI o debemos utilizar la CLI de un programa, simplemente nos estan diciendo que debemos ejecutar el programa o comando desde una terminal. La terminal por defacto que viene con MacOS se llama Terminal y la puede buscar en el launchpad. Al abrirla, veremos algo parecido a esto: Lo primero que veremos es una flecha la cual nos indica donde est\u00e1 el cursor (donde estamos escribiendo). Dentro de esta peque\u00f1a terminal, solo funciona el teclado as\u00ed que no intenten hacer click con el mouse para moverse. 1. Xcode Command Line Tools. En MacOS existe un entorno de desarrollo creado por Apple llamado Xcode, el mismo se utiliza para crear apps de IOS o MacOS. En nuestro caso, no nos interesa esta propiedad, pero si nos interesa los compiladores de c\u00f3digo que contiene los cuales son necesarios por Python para correr asi que seguiremos los siguiente pasos: Abrir una terminal pegar en la terminal el siguiente comando: xcode-select --install Apretar ENTER, una ventana aparecer\u00e1 indicando que queremos instalar la suite de programa de desarrollo. En caso que dicho programa ya est\u00e9 instalado, nos dir\u00e1 esto mismo y podemos pasar a la siguiente secci\u00f3n. Seguir los pasos de instalaci\u00f3n de dicha ventana, esto puede tomar un tiempo considerable y es un paso necesario. Una vez finalizado, cerrar la terminal. 2. Homebrew: The missing package manager. Cuando programamos muchas veces necesitamos instalar packages que son algo parecido a descargar un \"programa\" especial que tiene muchas funcionalidades especiales. Cuando queremos instalar un programa, normalmente iriamos a un una web donde descargamos dicho programa (AppStore en Apple) en el caso de los packages esto es utilizar un package manaer (programa que viene a ser como el app-store para programadores. Hombrebrew es el package manager m\u00e1s utilizado en el entorno de MacOS y es el que utilizaremos por default para instalar los programas de programaci\u00f3n que necesitemos. Nos dirigimos a la main page => brew Copiamos el comando de descarga: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Abrimos una terminal y pegamos dicho commando, tal que nos quede de la siguiente manera y damos enter: Este paso puede demorar un rato largo. Porfavor ser paciente! Luego de que finalize el anterior comando, veremos de correr el siguiente comando en la terminal: $> brew doctor No nos importa el resultado de este comando (muy probablemente indique un par de warnings ), lo que estar\u00eda mal es un mensaje del estilo: commando not found . En ese caso debemos avisar a los profesores y seguir sus indicaciones. Ya contas con los programas necesarios para poders correr Python . En la pr\u00f3xima secci\u00f3n veremos como instalar el lenguaje de programaci\u00f3n y sus utilidades. 3. PyEnv: Python Version management. Un poco de contexto: A esta altura, te estar\u00e1s preguntando \"como puede ser tan dif\u00edcil tener lo necesario para programar? me est\u00e1n queriendo hackear la computadora?\". Todas estas preguntas son completamente v\u00e1lidas y entendibles para quien no est\u00e1 acostumbrado a lidiar con los problemas de programar. La realidad es que todos los pasos que seguimos hasta ahora no son espec\u00edficos para Python, sino que descargamos herramientas necesarias para cualquier tipo de programaci\u00f3n que hagan y les ser\u00e1n \u00fatiles en el resto de la carrera! Si pensamos en una analog\u00eda de cocina, donde programar es cocinar. Lo que acabamos de hacer es comprar los utencilios de cocina, que son necesarios para cocinar. Ahora, Python es un lenguaje y como todo lenguaje (espa\u00f1ol, chino, java, javascript, sql, etc) no necesita m\u00e1s que te acuerdes de la sintaxis para poder escribirlo. Es decir, no importa el lenguaje (sea de programaci\u00f3n o no) lo \u00fanico que necesitamos para saberlo es entender su sintaxis. Habiendo hecho esta aclaraci\u00f3n, ahora si podemos concentrarnos en la particularidad de los lenguajes de programaci\u00f3n .... y es que las computadoras los entienden y nos permiten comunicarnos con ellas. Esta particular propiedad de los lenguajes de programaci\u00f3n no ocurre por arte de m\u00e1gia sino que se debe a la existencia de traductores (programas que traducen los comandos escritos en lenguajes de programaci\u00f3n que conocemos a c\u00f3digo binario). Estos traductores son espec\u00edficos para cada computadora y para cada lenguaje (es decir que Python tiene un traductor, C tiene otro, Java tiene otro, etc) por lo que debemos descargar el interprete correspondiente para poder finalmente comunicarnos con nuestra computadora. Ahora si, con el contexto de los lenguajes de programaci\u00f3n y como estos se comunican con la computadora pasemos a descargar e instalar el traductor de Python. Para esto vamos a utilizar un paquete especial llamado pyenv , este es un programa especial que nos instala todo lo necesario para correr el traductor de python. La raz\u00f3n de porque utilizamos pyenv y no descargamos directamente Python es porque el lenguaje tiene muchas versiones. Pensemos en version del lenguaje como ediciones del diccionario espa\u00f1ol de la RAE. Todos los a\u00f1os la RAE revisa el leguanje espa\u00f1ol y determina que palabras se eliminan y cuales se incorporan como parte del lenguaje. Python cuenta con la Python Software Fundation que se encarga de revisar el lenguaje y van modificando cosas del mismo. A diferencia del espa\u00f1ol, un traductor de una versi\u00f3n de Python no sabe de las otras versiones por lo que hay ciertos comandos que son espec\u00edficos de cada versi\u00f3n y es importante tener una forma de manejar las diferentes versiones de Python. PyEnv es un manejador de versiones de Python, el cual se encarga de menejar la versi\u00f3n de Python por nosotros y por eso es conveniente su uso. Para instalarlo seguiremos los siguientes pasos: Abrir una terminal Ejecutar el siguiente comando en la terminal: brew install pyenv Cerrar y volver a abrir la terminal Ejecutar el siguiente comando para instalar la versi\u00f3n 3.8.13 de Python pyenv install 3.8.13 Ejecutar el siguiente comando para dejar esta versi\u00f3n como la default: pyenv global 3.8.13 De esta manera cada vez que invoquemos a Python utilizaremos la versi\u00f3n correcta. Podemos probrar que python que todo qued\u00f3 correctamente instalado ejecutando pyenv global lo cual deber\u00eda decirnos: $>3.8.13 Hacer un update de las depencencias, desde terminal: pip install pip --upgrade pip install pipenv Con todo esto, ya se encuentran con su primera versi\u00f3n de Python instalada y lista! Pueden ejecutar el c\u00f3digo para ver la filos\u00f3f\u00eda de Python: python -c \"import this\" 4. VS Code: Entorno de desarrollo. Ahora que contamos con un traductor de python ya casi somos programadores, solo nos falta: Ver la saga completa de Star Wars Ropa hipster Un sill\u00f3n gamer Comentar en toda discusi\u00f3n de Twitter sobre que lenguaje de programaci\u00f3n es el mejor y porque es Python Pero dejando todos los estereotipos de lado, nos falta un detalle para poder comenzar nuestra carrera de programaci\u00f3n y es un editor de texto . Tal como coment\u00e9 m\u00e1s arriba, no hay nada especial sobre las palabras que componen un lenguaje de programaci\u00f3n por lo que nos podriamos preguntar \"porque no escribirlo directamente en Word?\". Esta pregunta es completamente v\u00e1lida y la respuesta involucra entender un poco sobre formatos de archivos. Si utilizamos Word o Excel veremos que el archivo que genera el editor tiene una \"extensi\u00f3n\" del tipo .doc o .xsls entre otras. Esta terminaci\u00f3n es una forma que tienen los editores de avisarle al usuario (nosotros) que el archivo est\u00e1 escrito en un formato espec\u00edfico. Si intentamos abrir dicho archivo sin el editor correspondiente, veremos un mont\u00f3n de s\u00edmbolos raros y no entendermos nada de lo que est\u00e9 escrito porque se encuentra en formato binario . Para programar, en cambio, utilizamos lo que se llama texto plano que refiere a que no utilizamos ningun editor especial para escribir dicho c\u00f3digo. Como por defautl MacOS no cuenta con editores de texto plano (TextEdit tiene la funcionalidad pero no es sencillo) utilizaremos un editor nuevo que es altamente utilizado y vers\u00e1til llamado \"VS Code\". Para instalarlo debemos seguir los pasos descritos en la secci\u00f3n de instalaci\u00f3n dentro del manual de Microsoft => Tutorial de instalaci\u00f3n","title":"Mac"},{"location":"installation/mac-install/#macos-python-installation","text":"Esta secci\u00f3n es una gu\u00eda para generar un entorno de desarrollo necesario para el curso de pensamiento computacional el cual constar\u00e1 de los siguientes recursos: Homebrew como package manager Pyenv como manejador de versiones de Python VS Code como editor de texto Al finalizar esta gu\u00eda contaremos con un editor de texto y el interprete de Python correspondiente para esta materia. Utilizaremos Python en su versi\u00f3n 3.8.13 por lo que es importante seguir estos pasos para hacer un correcto setup. Info En este tutorial hablaremos de la Terminal , esto es un programa especial que viene inclu\u00eddo dentro de nuestra computadora y se utiliza para interactuar con nuestro sistema operativo. Antes que existieran las Graphical User Interfaces, la gente utilizaba estas terminales de texto para utilizar la computadora. Siempre que escuchemos CLI , tenemos que recordar que esto se refiere al termino Command Line Interface. Lo cual hace referencia a aquella \u00e9poca en la que la gente se comunicaba con la computadora utilizando la terminal. Entonces si un programa debe tener una CLI o debemos utilizar la CLI de un programa, simplemente nos estan diciendo que debemos ejecutar el programa o comando desde una terminal. La terminal por defacto que viene con MacOS se llama Terminal y la puede buscar en el launchpad. Al abrirla, veremos algo parecido a esto: Lo primero que veremos es una flecha la cual nos indica donde est\u00e1 el cursor (donde estamos escribiendo). Dentro de esta peque\u00f1a terminal, solo funciona el teclado as\u00ed que no intenten hacer click con el mouse para moverse.","title":"MacOS Python Installation"},{"location":"installation/mac-install/#1-xcode-command-line-tools","text":"En MacOS existe un entorno de desarrollo creado por Apple llamado Xcode, el mismo se utiliza para crear apps de IOS o MacOS. En nuestro caso, no nos interesa esta propiedad, pero si nos interesa los compiladores de c\u00f3digo que contiene los cuales son necesarios por Python para correr asi que seguiremos los siguiente pasos: Abrir una terminal pegar en la terminal el siguiente comando: xcode-select --install Apretar ENTER, una ventana aparecer\u00e1 indicando que queremos instalar la suite de programa de desarrollo. En caso que dicho programa ya est\u00e9 instalado, nos dir\u00e1 esto mismo y podemos pasar a la siguiente secci\u00f3n. Seguir los pasos de instalaci\u00f3n de dicha ventana, esto puede tomar un tiempo considerable y es un paso necesario. Una vez finalizado, cerrar la terminal.","title":"1. Xcode Command Line Tools."},{"location":"installation/mac-install/#2-homebrew-the-missing-package-manager","text":"Cuando programamos muchas veces necesitamos instalar packages que son algo parecido a descargar un \"programa\" especial que tiene muchas funcionalidades especiales. Cuando queremos instalar un programa, normalmente iriamos a un una web donde descargamos dicho programa (AppStore en Apple) en el caso de los packages esto es utilizar un package manaer (programa que viene a ser como el app-store para programadores. Hombrebrew es el package manager m\u00e1s utilizado en el entorno de MacOS y es el que utilizaremos por default para instalar los programas de programaci\u00f3n que necesitemos. Nos dirigimos a la main page => brew Copiamos el comando de descarga: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Abrimos una terminal y pegamos dicho commando, tal que nos quede de la siguiente manera y damos enter: Este paso puede demorar un rato largo. Porfavor ser paciente! Luego de que finalize el anterior comando, veremos de correr el siguiente comando en la terminal: $> brew doctor No nos importa el resultado de este comando (muy probablemente indique un par de warnings ), lo que estar\u00eda mal es un mensaje del estilo: commando not found . En ese caso debemos avisar a los profesores y seguir sus indicaciones. Ya contas con los programas necesarios para poders correr Python . En la pr\u00f3xima secci\u00f3n veremos como instalar el lenguaje de programaci\u00f3n y sus utilidades.","title":"2. Homebrew: The missing package manager."},{"location":"installation/mac-install/#3-pyenv-python-version-management","text":"Un poco de contexto: A esta altura, te estar\u00e1s preguntando \"como puede ser tan dif\u00edcil tener lo necesario para programar? me est\u00e1n queriendo hackear la computadora?\". Todas estas preguntas son completamente v\u00e1lidas y entendibles para quien no est\u00e1 acostumbrado a lidiar con los problemas de programar. La realidad es que todos los pasos que seguimos hasta ahora no son espec\u00edficos para Python, sino que descargamos herramientas necesarias para cualquier tipo de programaci\u00f3n que hagan y les ser\u00e1n \u00fatiles en el resto de la carrera! Si pensamos en una analog\u00eda de cocina, donde programar es cocinar. Lo que acabamos de hacer es comprar los utencilios de cocina, que son necesarios para cocinar. Ahora, Python es un lenguaje y como todo lenguaje (espa\u00f1ol, chino, java, javascript, sql, etc) no necesita m\u00e1s que te acuerdes de la sintaxis para poder escribirlo. Es decir, no importa el lenguaje (sea de programaci\u00f3n o no) lo \u00fanico que necesitamos para saberlo es entender su sintaxis. Habiendo hecho esta aclaraci\u00f3n, ahora si podemos concentrarnos en la particularidad de los lenguajes de programaci\u00f3n .... y es que las computadoras los entienden y nos permiten comunicarnos con ellas. Esta particular propiedad de los lenguajes de programaci\u00f3n no ocurre por arte de m\u00e1gia sino que se debe a la existencia de traductores (programas que traducen los comandos escritos en lenguajes de programaci\u00f3n que conocemos a c\u00f3digo binario). Estos traductores son espec\u00edficos para cada computadora y para cada lenguaje (es decir que Python tiene un traductor, C tiene otro, Java tiene otro, etc) por lo que debemos descargar el interprete correspondiente para poder finalmente comunicarnos con nuestra computadora. Ahora si, con el contexto de los lenguajes de programaci\u00f3n y como estos se comunican con la computadora pasemos a descargar e instalar el traductor de Python. Para esto vamos a utilizar un paquete especial llamado pyenv , este es un programa especial que nos instala todo lo necesario para correr el traductor de python. La raz\u00f3n de porque utilizamos pyenv y no descargamos directamente Python es porque el lenguaje tiene muchas versiones. Pensemos en version del lenguaje como ediciones del diccionario espa\u00f1ol de la RAE. Todos los a\u00f1os la RAE revisa el leguanje espa\u00f1ol y determina que palabras se eliminan y cuales se incorporan como parte del lenguaje. Python cuenta con la Python Software Fundation que se encarga de revisar el lenguaje y van modificando cosas del mismo. A diferencia del espa\u00f1ol, un traductor de una versi\u00f3n de Python no sabe de las otras versiones por lo que hay ciertos comandos que son espec\u00edficos de cada versi\u00f3n y es importante tener una forma de manejar las diferentes versiones de Python. PyEnv es un manejador de versiones de Python, el cual se encarga de menejar la versi\u00f3n de Python por nosotros y por eso es conveniente su uso. Para instalarlo seguiremos los siguientes pasos: Abrir una terminal Ejecutar el siguiente comando en la terminal: brew install pyenv Cerrar y volver a abrir la terminal Ejecutar el siguiente comando para instalar la versi\u00f3n 3.8.13 de Python pyenv install 3.8.13 Ejecutar el siguiente comando para dejar esta versi\u00f3n como la default: pyenv global 3.8.13 De esta manera cada vez que invoquemos a Python utilizaremos la versi\u00f3n correcta. Podemos probrar que python que todo qued\u00f3 correctamente instalado ejecutando pyenv global lo cual deber\u00eda decirnos: $>3.8.13 Hacer un update de las depencencias, desde terminal: pip install pip --upgrade pip install pipenv Con todo esto, ya se encuentran con su primera versi\u00f3n de Python instalada y lista! Pueden ejecutar el c\u00f3digo para ver la filos\u00f3f\u00eda de Python: python -c \"import this\"","title":"3. PyEnv: Python Version management."},{"location":"installation/mac-install/#4-vs-code-entorno-de-desarrollo","text":"Ahora que contamos con un traductor de python ya casi somos programadores, solo nos falta: Ver la saga completa de Star Wars Ropa hipster Un sill\u00f3n gamer Comentar en toda discusi\u00f3n de Twitter sobre que lenguaje de programaci\u00f3n es el mejor y porque es Python Pero dejando todos los estereotipos de lado, nos falta un detalle para poder comenzar nuestra carrera de programaci\u00f3n y es un editor de texto . Tal como coment\u00e9 m\u00e1s arriba, no hay nada especial sobre las palabras que componen un lenguaje de programaci\u00f3n por lo que nos podriamos preguntar \"porque no escribirlo directamente en Word?\". Esta pregunta es completamente v\u00e1lida y la respuesta involucra entender un poco sobre formatos de archivos. Si utilizamos Word o Excel veremos que el archivo que genera el editor tiene una \"extensi\u00f3n\" del tipo .doc o .xsls entre otras. Esta terminaci\u00f3n es una forma que tienen los editores de avisarle al usuario (nosotros) que el archivo est\u00e1 escrito en un formato espec\u00edfico. Si intentamos abrir dicho archivo sin el editor correspondiente, veremos un mont\u00f3n de s\u00edmbolos raros y no entendermos nada de lo que est\u00e9 escrito porque se encuentra en formato binario . Para programar, en cambio, utilizamos lo que se llama texto plano que refiere a que no utilizamos ningun editor especial para escribir dicho c\u00f3digo. Como por defautl MacOS no cuenta con editores de texto plano (TextEdit tiene la funcionalidad pero no es sencillo) utilizaremos un editor nuevo que es altamente utilizado y vers\u00e1til llamado \"VS Code\". Para instalarlo debemos seguir los pasos descritos en la secci\u00f3n de instalaci\u00f3n dentro del manual de Microsoft => Tutorial de instalaci\u00f3n","title":"4. VS Code: Entorno de desarrollo."},{"location":"installation/windows-install/","text":"Windows Python Installation Esta secci\u00f3n es una gu\u00eda para generar un entorno de desarrollo necesario para el curso de pensamiento computacional el cual constar\u00e1 de los siguientes recursos: WSL 2 Como interfaz con el sistema operativo Pyenv como manejador de versiones de Python VS Code como editor de texto Al finalizar esta gu\u00eda contaremos con un editor de texto y el interprete de Python correspondiente para esta materia. Utilizaremos Python en su versi\u00f3n 3.8.13 por lo que es importante seguir estos pasos para hacer un correcto setup. Warning Todo el material aqu\u00ed presente solo es v\u00e1lido para sistema operativo Windows 10 o superior Info En este tutorial hablaremos de la Terminal , esto es un programa especial que viene inclu\u00eddo dentro de nuestra computadora y se utiliza para interactuar con nuestro sistema operativo. Antes que existieran las Graphical User Interfaces, la gente utilizaba estas terminales de texto para utilizar la computadora. Siempre que escuchemos CLI , tenemos que recordar que esto se refiere al termino Command Line Interface. Lo cual hace referencia a aquella \u00e9poca en la que la gente se comunicaba con la computadora utilizando la terminal. Entonces si un programa debe tener una CLI o debemos utilizar la CLI de un programa, simplemente nos estan diciendo que debemos ejecutar el programa o comando desde una terminal. Windows por defacto utiliza lo que se llama command prompt esto NO es lo que queremos utilizar, veremos que al finalizar la primer secci\u00f3n tendremos una terminal que se parece a la siguiente: Lo primero que veremos es una flecha la cual nos indica donde est\u00e1 el cursor (donde estamos escribiendo). Dentro de esta peque\u00f1a terminal, solo funciona el teclado as\u00ed que no intenten hacer click con el mouse para moverse. 1. WSL 2: Windows Subsystem for Linux. Hist\u00f3ricamente Windows no es com\u00fanmente utilizado como sistema operativo para aprender en cursos y carreras de inform\u00e1tica esto se debe a variedad de razones que abarcan desde tener un dise\u00f1o que hace un poco m\u00e1s complicado armar entornos de desarrollo para herramientas que no sean Microsoft hasta el hecho de que no es un sistema operativo de c\u00f3digo abierto. Por estas y otras razones, es que los cursos y carreras inform\u00e1ticas normalmente se dictan basados sobre la premisa de correr software que corra sobre sistemas de c\u00f3digo abierto como las distribuciones de LINUX. Aunque desde nuestro lugar recomendamos fuertemente que todos tengan una forma de correr un sistema operativo basado sobre UNIX como puede ser MacOS, Ubuntu, Arch, Raspbian, etc. Esto no es un impedimento para la materia en cuesti\u00f3n y vamos a ver como podemos generar un entorno que nos permita aprender sin tener mayores inconvenientes. Warning Si bien este tutorial es v\u00e1lido para poder tener uns distribuci\u00f3n de todo el entorno de desarrollo que necesitamos para Pensamiento Computacional. Es recomendable que generen una partici\u00f3n del disco con un sistema operativo basado en Linux como puede ser Ubuntu, otra opci\u00f3n ser\u00eda utilizar un programa como virtualBox para generar una m\u00e1quina virtual que corra el entorno que nos interesa. Lo primero que haremos es abrir una Command Prompt o adminstrator PowerShell y corremos el siguiente commando: wsl --install Esto nos guiar\u00e1 por la serie de pasos para descargar el sistema operativo Ubuntu dentro de nuestra computadora. Finalizada la decarga, debemos pasar a hacer un setup de un usuario dentro de este nuevo sistema operativo. Gu\u00eda de setup ubuntu Finalizado tood este proceso, nos encontramos con un nuevo sistema operativo basado en la arquitectura UNIX que vive dentro de nuestra computadora Windows! Es importante que cada vez que hablemos de la terminal nos referiremos a esta nueva terminal que representa el sistema operativo Ubuntu. 2. PyEnv: Python Version management. Un poco de contexto: A esta altura, te estar\u00e1s preguntando \"como puede ser tan dif\u00edcil tener lo necesario para programar? me est\u00e1n queriendo hackear la computadora?\". Todas estas preguntas son completamente v\u00e1lidas y entendibles para quien no est\u00e1 acostumbrado a lidiar con los problemas de programar. La realidad es que todos los pasos que seguimos hasta ahora no son espec\u00edficos para Python, sino que descargamos herramientas necesarias para cualquier tipo de programaci\u00f3n que hagan y les ser\u00e1n \u00fatiles en el resto de la carrera! Si pensamos en una analog\u00eda de cocina, donde programar es cocinar. Lo que acabamos de hacer es comprar los utencilios de cocina, que son necesarios para cocinar. Ahora, Python es un lenguaje y como todo lenguaje (espa\u00f1ol, chino, java, javascript, sql, etc) no necesita m\u00e1s que te acuerdes de la sintaxis para poder escribirlo. Es decir, no importa el lenguaje (sea de programaci\u00f3n o no) lo \u00fanico que necesitamos para saberlo es entender su sintaxis. Habiendo hecho esta aclaraci\u00f3n, ahora si podemos concentrarnos en la particularidad de los lenguajes de programaci\u00f3n .... y es que las computadoras los entienden y nos permiten comunicarnos con ellas. Esta particular propiedad de los lenguajes de programaci\u00f3n no ocurre por arte de m\u00e1gia sino que se debe a la existencia de traductores (programas que traducen los comandos escritos en lenguajes de programaci\u00f3n que conocemos a c\u00f3digo binario). Estos traductores son espec\u00edficos para cada computadora y para cada lenguaje (es decir que Python tiene un traductor, C tiene otro, Java tiene otro, etc) por lo que debemos descargar el interprete correspondiente para poder finalmente comunicarnos con nuestra computadora. Ahora si, con el contexto de los lenguajes de programaci\u00f3n y como estos se comunican con la computadora pasemos a descargar e instalar el traductor de Python. Para esto vamos a utilizar un paquete especial llamado pyenv , este es un programa especial que nos instala todo lo necesario para correr el traductor de python. La raz\u00f3n de porque utilizamos pyenv y no descargamos directamente Python es porque el lenguaje tiene muchas versiones. Pensemos en version del lenguaje como ediciones del diccionario espa\u00f1ol de la RAE. Todos los a\u00f1os la RAE revisa el leguanje espa\u00f1ol y determina que palabras se eliminan y cuales se incorporan como parte del lenguaje. Python cuenta con la Python Software Fundation que se encarga de revisar el lenguaje y van modificando cosas del mismo. A diferencia del espa\u00f1ol, un traductor de una versi\u00f3n de Python no sabe de las otras versiones por lo que hay ciertos comandos que son espec\u00edficos de cada versi\u00f3n y es importante tener una forma de manejar las diferentes versiones de Python. PyEnv es un manejador de versiones de Python, el cual se encarga de menejar la versi\u00f3n de Python por nosotros y por eso es conveniente su uso. Para instalarlo seguiremos los siguientes pasos: Abrir una terminal Ejecutar el siguiente comando en la terminal: sudo apt update && sudo apt upgrade Seguir los pasos que indique en pantalla, puede ser que tarde un tiempo prolongaod este paso. Cerrar y volver a abrir la terminal Ejecutar el siguiente comando: apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-devlibncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git Nuevamente, debemos confirmar que queremos instalar todos estos paquetes y esperar. Ejecutar el siguiente comando en terminal curl https://pyenv.run | bash Ejecutar el siguiente comando para instalar la versi\u00f3n 3.8.13 de Python pyenv install 3.8.13 Ejecutar el siguiente comando para dejar esta versi\u00f3n como la default: pyenv global 3.8.13 De esta manera cada vez que invoquemos a Python utilizaremos la versi\u00f3n correcta. Podemos probrar que python que todo qued\u00f3 correctamente instalado ejecutando pyenv global lo cual deber\u00eda decirnos: $>3.8.13 Hacer un update de las depencencias, desde terminal: pip install pip --upgrade pip install pipenv Con todo esto, ya se encuentran con su primera versi\u00f3n de Python instalada y lista! Pueden ejecutar el c\u00f3digo para ver la filos\u00f3f\u00eda de Python: python -c \"import this\" 4. VS Code: Entorno de desarrollo. Ahora que contamos con un traductor de python ya casi somos programadores, solo nos falta: Ver la saga completa de Star Wars Ropa hipster Un sill\u00f3n gamer Comentar en toda discusi\u00f3n de Twitter sobre que lenguaje de programaci\u00f3n es el mejor y porque es Python Pero dejando todos los estereotipos de lado, nos falta un detalle para poder comenzar nuestra carrera de programaci\u00f3n y es un editor de texto . Tal como coment\u00e9 m\u00e1s arriba, no hay nada especial sobre las palabras que componen un lenguaje de programaci\u00f3n por lo que nos podriamos preguntar \"porque no escribirlo directamente en Word?\". Esta pregunta es completamente v\u00e1lida y la respuesta involucra entender un poco sobre formatos de archivos. Si utilizamos Word o Excel veremos que el archivo que genera el editor tiene una \"extensi\u00f3n\" del tipo .doc o .xsls entre otras. Esta terminaci\u00f3n es una forma que tienen los editores de avisarle al usuario (nosotros) que el archivo est\u00e1 escrito en un formato espec\u00edfico. Si intentamos abrir dicho archivo sin el editor correspondiente, veremos un mont\u00f3n de s\u00edmbolos raros y no entendermos nada de lo que est\u00e9 escrito porque se encuentra en formato binario . Para programar, en cambio, utilizamos lo que se llama texto plano que refiere a que no utilizamos ningun editor especial para escribir dicho c\u00f3digo. Como por defautl MacOS no cuenta con editores de texto plano (TextEdit tiene la funcionalidad pero no es sencillo) utilizaremos un editor nuevo que es altamente utilizado y vers\u00e1til llamado \"VS Code\". Para instalarlo debemos seguir los pasos descritos en la secci\u00f3n de instalaci\u00f3n dentro del manual de Microsoft => Tutorial de instalaci\u00f3n","title":"Windows"},{"location":"installation/windows-install/#windows-python-installation","text":"Esta secci\u00f3n es una gu\u00eda para generar un entorno de desarrollo necesario para el curso de pensamiento computacional el cual constar\u00e1 de los siguientes recursos: WSL 2 Como interfaz con el sistema operativo Pyenv como manejador de versiones de Python VS Code como editor de texto Al finalizar esta gu\u00eda contaremos con un editor de texto y el interprete de Python correspondiente para esta materia. Utilizaremos Python en su versi\u00f3n 3.8.13 por lo que es importante seguir estos pasos para hacer un correcto setup. Warning Todo el material aqu\u00ed presente solo es v\u00e1lido para sistema operativo Windows 10 o superior Info En este tutorial hablaremos de la Terminal , esto es un programa especial que viene inclu\u00eddo dentro de nuestra computadora y se utiliza para interactuar con nuestro sistema operativo. Antes que existieran las Graphical User Interfaces, la gente utilizaba estas terminales de texto para utilizar la computadora. Siempre que escuchemos CLI , tenemos que recordar que esto se refiere al termino Command Line Interface. Lo cual hace referencia a aquella \u00e9poca en la que la gente se comunicaba con la computadora utilizando la terminal. Entonces si un programa debe tener una CLI o debemos utilizar la CLI de un programa, simplemente nos estan diciendo que debemos ejecutar el programa o comando desde una terminal. Windows por defacto utiliza lo que se llama command prompt esto NO es lo que queremos utilizar, veremos que al finalizar la primer secci\u00f3n tendremos una terminal que se parece a la siguiente: Lo primero que veremos es una flecha la cual nos indica donde est\u00e1 el cursor (donde estamos escribiendo). Dentro de esta peque\u00f1a terminal, solo funciona el teclado as\u00ed que no intenten hacer click con el mouse para moverse.","title":"Windows Python Installation"},{"location":"installation/windows-install/#1-wsl-2-windows-subsystem-for-linux","text":"Hist\u00f3ricamente Windows no es com\u00fanmente utilizado como sistema operativo para aprender en cursos y carreras de inform\u00e1tica esto se debe a variedad de razones que abarcan desde tener un dise\u00f1o que hace un poco m\u00e1s complicado armar entornos de desarrollo para herramientas que no sean Microsoft hasta el hecho de que no es un sistema operativo de c\u00f3digo abierto. Por estas y otras razones, es que los cursos y carreras inform\u00e1ticas normalmente se dictan basados sobre la premisa de correr software que corra sobre sistemas de c\u00f3digo abierto como las distribuciones de LINUX. Aunque desde nuestro lugar recomendamos fuertemente que todos tengan una forma de correr un sistema operativo basado sobre UNIX como puede ser MacOS, Ubuntu, Arch, Raspbian, etc. Esto no es un impedimento para la materia en cuesti\u00f3n y vamos a ver como podemos generar un entorno que nos permita aprender sin tener mayores inconvenientes. Warning Si bien este tutorial es v\u00e1lido para poder tener uns distribuci\u00f3n de todo el entorno de desarrollo que necesitamos para Pensamiento Computacional. Es recomendable que generen una partici\u00f3n del disco con un sistema operativo basado en Linux como puede ser Ubuntu, otra opci\u00f3n ser\u00eda utilizar un programa como virtualBox para generar una m\u00e1quina virtual que corra el entorno que nos interesa. Lo primero que haremos es abrir una Command Prompt o adminstrator PowerShell y corremos el siguiente commando: wsl --install Esto nos guiar\u00e1 por la serie de pasos para descargar el sistema operativo Ubuntu dentro de nuestra computadora. Finalizada la decarga, debemos pasar a hacer un setup de un usuario dentro de este nuevo sistema operativo. Gu\u00eda de setup ubuntu Finalizado tood este proceso, nos encontramos con un nuevo sistema operativo basado en la arquitectura UNIX que vive dentro de nuestra computadora Windows! Es importante que cada vez que hablemos de la terminal nos referiremos a esta nueva terminal que representa el sistema operativo Ubuntu.","title":"1. WSL 2: Windows Subsystem for Linux."},{"location":"installation/windows-install/#2-pyenv-python-version-management","text":"Un poco de contexto: A esta altura, te estar\u00e1s preguntando \"como puede ser tan dif\u00edcil tener lo necesario para programar? me est\u00e1n queriendo hackear la computadora?\". Todas estas preguntas son completamente v\u00e1lidas y entendibles para quien no est\u00e1 acostumbrado a lidiar con los problemas de programar. La realidad es que todos los pasos que seguimos hasta ahora no son espec\u00edficos para Python, sino que descargamos herramientas necesarias para cualquier tipo de programaci\u00f3n que hagan y les ser\u00e1n \u00fatiles en el resto de la carrera! Si pensamos en una analog\u00eda de cocina, donde programar es cocinar. Lo que acabamos de hacer es comprar los utencilios de cocina, que son necesarios para cocinar. Ahora, Python es un lenguaje y como todo lenguaje (espa\u00f1ol, chino, java, javascript, sql, etc) no necesita m\u00e1s que te acuerdes de la sintaxis para poder escribirlo. Es decir, no importa el lenguaje (sea de programaci\u00f3n o no) lo \u00fanico que necesitamos para saberlo es entender su sintaxis. Habiendo hecho esta aclaraci\u00f3n, ahora si podemos concentrarnos en la particularidad de los lenguajes de programaci\u00f3n .... y es que las computadoras los entienden y nos permiten comunicarnos con ellas. Esta particular propiedad de los lenguajes de programaci\u00f3n no ocurre por arte de m\u00e1gia sino que se debe a la existencia de traductores (programas que traducen los comandos escritos en lenguajes de programaci\u00f3n que conocemos a c\u00f3digo binario). Estos traductores son espec\u00edficos para cada computadora y para cada lenguaje (es decir que Python tiene un traductor, C tiene otro, Java tiene otro, etc) por lo que debemos descargar el interprete correspondiente para poder finalmente comunicarnos con nuestra computadora. Ahora si, con el contexto de los lenguajes de programaci\u00f3n y como estos se comunican con la computadora pasemos a descargar e instalar el traductor de Python. Para esto vamos a utilizar un paquete especial llamado pyenv , este es un programa especial que nos instala todo lo necesario para correr el traductor de python. La raz\u00f3n de porque utilizamos pyenv y no descargamos directamente Python es porque el lenguaje tiene muchas versiones. Pensemos en version del lenguaje como ediciones del diccionario espa\u00f1ol de la RAE. Todos los a\u00f1os la RAE revisa el leguanje espa\u00f1ol y determina que palabras se eliminan y cuales se incorporan como parte del lenguaje. Python cuenta con la Python Software Fundation que se encarga de revisar el lenguaje y van modificando cosas del mismo. A diferencia del espa\u00f1ol, un traductor de una versi\u00f3n de Python no sabe de las otras versiones por lo que hay ciertos comandos que son espec\u00edficos de cada versi\u00f3n y es importante tener una forma de manejar las diferentes versiones de Python. PyEnv es un manejador de versiones de Python, el cual se encarga de menejar la versi\u00f3n de Python por nosotros y por eso es conveniente su uso. Para instalarlo seguiremos los siguientes pasos: Abrir una terminal Ejecutar el siguiente comando en la terminal: sudo apt update && sudo apt upgrade Seguir los pasos que indique en pantalla, puede ser que tarde un tiempo prolongaod este paso. Cerrar y volver a abrir la terminal Ejecutar el siguiente comando: apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-devlibncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git Nuevamente, debemos confirmar que queremos instalar todos estos paquetes y esperar. Ejecutar el siguiente comando en terminal curl https://pyenv.run | bash Ejecutar el siguiente comando para instalar la versi\u00f3n 3.8.13 de Python pyenv install 3.8.13 Ejecutar el siguiente comando para dejar esta versi\u00f3n como la default: pyenv global 3.8.13 De esta manera cada vez que invoquemos a Python utilizaremos la versi\u00f3n correcta. Podemos probrar que python que todo qued\u00f3 correctamente instalado ejecutando pyenv global lo cual deber\u00eda decirnos: $>3.8.13 Hacer un update de las depencencias, desde terminal: pip install pip --upgrade pip install pipenv Con todo esto, ya se encuentran con su primera versi\u00f3n de Python instalada y lista! Pueden ejecutar el c\u00f3digo para ver la filos\u00f3f\u00eda de Python: python -c \"import this\"","title":"2. PyEnv: Python Version management."},{"location":"installation/windows-install/#4-vs-code-entorno-de-desarrollo","text":"Ahora que contamos con un traductor de python ya casi somos programadores, solo nos falta: Ver la saga completa de Star Wars Ropa hipster Un sill\u00f3n gamer Comentar en toda discusi\u00f3n de Twitter sobre que lenguaje de programaci\u00f3n es el mejor y porque es Python Pero dejando todos los estereotipos de lado, nos falta un detalle para poder comenzar nuestra carrera de programaci\u00f3n y es un editor de texto . Tal como coment\u00e9 m\u00e1s arriba, no hay nada especial sobre las palabras que componen un lenguaje de programaci\u00f3n por lo que nos podriamos preguntar \"porque no escribirlo directamente en Word?\". Esta pregunta es completamente v\u00e1lida y la respuesta involucra entender un poco sobre formatos de archivos. Si utilizamos Word o Excel veremos que el archivo que genera el editor tiene una \"extensi\u00f3n\" del tipo .doc o .xsls entre otras. Esta terminaci\u00f3n es una forma que tienen los editores de avisarle al usuario (nosotros) que el archivo est\u00e1 escrito en un formato espec\u00edfico. Si intentamos abrir dicho archivo sin el editor correspondiente, veremos un mont\u00f3n de s\u00edmbolos raros y no entendermos nada de lo que est\u00e9 escrito porque se encuentra en formato binario . Para programar, en cambio, utilizamos lo que se llama texto plano que refiere a que no utilizamos ningun editor especial para escribir dicho c\u00f3digo. Como por defautl MacOS no cuenta con editores de texto plano (TextEdit tiene la funcionalidad pero no es sencillo) utilizaremos un editor nuevo que es altamente utilizado y vers\u00e1til llamado \"VS Code\". Para instalarlo debemos seguir los pasos descritos en la secci\u00f3n de instalaci\u00f3n dentro del manual de Microsoft => Tutorial de instalaci\u00f3n","title":"4. VS Code: Entorno de desarrollo."},{"location":"oop/disect_objects/","text":"Partes de un objeto. Entendamos como representar un objeto en Python Intentemos representar un estudiante. Progresivamente vamos a ir llegando a un modelo que nos sea \u00fatil. Obs OOP es un estilo de programaci\u00f3n que pone gran parte del enfoque en generar un modelo de la realidad que sea \u00fatil para nuestro problema. Que es esto de clases: Una clase es simplemente un \"blue print\" de lo que esperamos que tenga. Como en arquitectura, piensen en la definci\u00f3n de clase como el plano de la casa lo cual no es lo mismo que la casa. Ahora, un objeto es una \"instancia de la clase\" o lo mismo que una casa que siga los planos que planteamos. Es la materializaci\u00f3n del blue print que armamos. 1. Objeto dummy: # definici\u00f3n de la clase (blue print) #Aqu\u00ed definimos una clase, en su forma m\u00e1s sencilla. No contiene absolutamente ning\u00fan valor nuevo. class Student : pass # ac\u00e1 estamos generando una \"instnacia de la clase\". Lo que ser\u00eda la casa de nuestra analog\u00eda. chispita = Student () # ahora chispita es una variable que hace referencia a una instancia de la clase Student. not_chispita = Student () # veamos que dos instancias de la misma clase no son iguales. Esto es porque son diferentes objetos # a pesar de que ambos pertenecen a la clase Student. chispita == not_chispita 2. M\u00e9todos: Ahora como todo alumno es cordial, deberiamos permitir que el objeto alumno tenga una forma de saludar imprimiendo por pantalla el mensaje \"hola!\" Para esto tenemos que agregar un \"metodo\" a la case que ejecute el comportamiento que nosotros queremos. Un M\u00e9todo es el nombre OOP que le damos a las funciones que se declaran como parte de una clase. class GreetingStudent : def greet ( self ) -> None : print ( 'hola!' ) En este ejemplo ver\u00e1n la clase GreetingStudent contiene un m\u00e9todo greet el cual ejecuta el comportamiento deseado. Lo primero que vemos, es que un m\u00e9todo es literalmente una funci\u00f3n y esto es correcto. Lo segundo que veremos es que la funci\u00f3n recibe un par\u00e1metro llamado \"self\", esto es lo que diferencia a una funci\u00f3n tal y como la concen de un m\u00e9todo (a aprte de estar definida dentro de una clase). El primer par\u00e1metro de los m\u00e9todos de una clase casi siempre es especial. En el caso de \"self\", como el nombre indica es una referencia a si mismo. Lo que tienen que saber es que este argumento solo deben declararlo en la definici\u00f3n de la funci\u00f3n pero al llamarla este par\u00e1metro es auto completado por Python. class GreetingStudent : def greet ( self ) -> None : print ( 'hola!' ) student = GreetingStudent () student . greet () # Asi es como invocamos a la funci\u00f3n greet, fijense que tuve que crear una instancia de GreetingStudent para poder ejecutarla. 3. Atributos Al igual que en un plano podemos incluir \"paredes\",\"puertas\", \"aperturas\" en las clases podemos tener lo que llamamos \"atributos\". Un atributo, es simplemente un valor que pertenece a esa clase. Piensenlo como una variable interna de la clase, podemos generar cuantas querramos, la forma de crearlas es utilizando el argumento de self. class StudentWithArguments : def __init__ ( self ,): # de esta forma estamos asignando el valor 'santiago' a la variable name # ahora en cualquier otro metodo de la clase donde utilicemos el atributo name (self.name) # obtendremos este valor self . name = 'santiago' def greet ( self ) -> None : print ( f 'Hola me llamo { self . name } ' ) santi = StudentWithArguments () santi . greet ()","title":"Ejemplo de un objeto"},{"location":"oop/disect_objects/#partes-de-un-objeto","text":"Entendamos como representar un objeto en Python Intentemos representar un estudiante. Progresivamente vamos a ir llegando a un modelo que nos sea \u00fatil. Obs OOP es un estilo de programaci\u00f3n que pone gran parte del enfoque en generar un modelo de la realidad que sea \u00fatil para nuestro problema.","title":"Partes de un objeto."},{"location":"oop/disect_objects/#que-es-esto-de-clases","text":"Una clase es simplemente un \"blue print\" de lo que esperamos que tenga. Como en arquitectura, piensen en la definci\u00f3n de clase como el plano de la casa lo cual no es lo mismo que la casa. Ahora, un objeto es una \"instancia de la clase\" o lo mismo que una casa que siga los planos que planteamos. Es la materializaci\u00f3n del blue print que armamos.","title":"Que es esto de clases:"},{"location":"oop/disect_objects/#1-objeto-dummy","text":"# definici\u00f3n de la clase (blue print) #Aqu\u00ed definimos una clase, en su forma m\u00e1s sencilla. No contiene absolutamente ning\u00fan valor nuevo. class Student : pass # ac\u00e1 estamos generando una \"instnacia de la clase\". Lo que ser\u00eda la casa de nuestra analog\u00eda. chispita = Student () # ahora chispita es una variable que hace referencia a una instancia de la clase Student. not_chispita = Student () # veamos que dos instancias de la misma clase no son iguales. Esto es porque son diferentes objetos # a pesar de que ambos pertenecen a la clase Student. chispita == not_chispita","title":"1. Objeto dummy:"},{"location":"oop/disect_objects/#2-metodos","text":"Ahora como todo alumno es cordial, deberiamos permitir que el objeto alumno tenga una forma de saludar imprimiendo por pantalla el mensaje \"hola!\" Para esto tenemos que agregar un \"metodo\" a la case que ejecute el comportamiento que nosotros queremos. Un M\u00e9todo es el nombre OOP que le damos a las funciones que se declaran como parte de una clase. class GreetingStudent : def greet ( self ) -> None : print ( 'hola!' ) En este ejemplo ver\u00e1n la clase GreetingStudent contiene un m\u00e9todo greet el cual ejecuta el comportamiento deseado. Lo primero que vemos, es que un m\u00e9todo es literalmente una funci\u00f3n y esto es correcto. Lo segundo que veremos es que la funci\u00f3n recibe un par\u00e1metro llamado \"self\", esto es lo que diferencia a una funci\u00f3n tal y como la concen de un m\u00e9todo (a aprte de estar definida dentro de una clase). El primer par\u00e1metro de los m\u00e9todos de una clase casi siempre es especial. En el caso de \"self\", como el nombre indica es una referencia a si mismo. Lo que tienen que saber es que este argumento solo deben declararlo en la definici\u00f3n de la funci\u00f3n pero al llamarla este par\u00e1metro es auto completado por Python. class GreetingStudent : def greet ( self ) -> None : print ( 'hola!' ) student = GreetingStudent () student . greet () # Asi es como invocamos a la funci\u00f3n greet, fijense que tuve que crear una instancia de GreetingStudent para poder ejecutarla.","title":"2. M\u00e9todos:"},{"location":"oop/disect_objects/#3-atributos","text":"Al igual que en un plano podemos incluir \"paredes\",\"puertas\", \"aperturas\" en las clases podemos tener lo que llamamos \"atributos\". Un atributo, es simplemente un valor que pertenece a esa clase. Piensenlo como una variable interna de la clase, podemos generar cuantas querramos, la forma de crearlas es utilizando el argumento de self. class StudentWithArguments : def __init__ ( self ,): # de esta forma estamos asignando el valor 'santiago' a la variable name # ahora en cualquier otro metodo de la clase donde utilicemos el atributo name (self.name) # obtendremos este valor self . name = 'santiago' def greet ( self ) -> None : print ( f 'Hola me llamo { self . name } ' ) santi = StudentWithArguments () santi . greet ()","title":"3. Atributos"},{"location":"oop/intro/","text":"Programaci\u00f3n Orientada a Objetos: En esta secci\u00f3n veremos los conceptos b\u00e1sicos de Programaci\u00f3n orientada a objetos (OOP en ingl\u00e9s). El objetivo es entender que es el paradigma, que intenta solucionar y cuales son sus fundamentos. Un poco de historia: En la prehisotria, cuando los primeros homosapiens comenzaron a darse cuenta que escribir c\u00f3digo es \u00fatil, las empresas comenzaron a tener servidores (los denominados main frames ) y contratar muchas personas para manejar dichos servidores y reemplazar tareas administrativas como operaciones contables o tareas repetitivas. Ya para la decada de 1980 gran parte de la sociendad se encontraba en proceso de digitalizaci\u00f3n, para este momento los programas hab\u00eda empezado a escalar en complejidad y la cantidad de personas manejando dichos sistemas. Esta complejizaci\u00f3n llev\u00f3 a que se dificulte cada vez m\u00e1s pensar en programas que funcionen utilizando el paradigma procedural (el que ya conocen). Esta nueva complejidad, sistemas que empezaban a tener a\u00f1os en servicio y muchas lineas de c\u00f3digo, impuls\u00f3 a que se busque una nueva forma de encarar el desarrollo de aplicaciones para el sector. Esta b\u00fasqueda culmin\u00f3 en la adopci\u00f3n del paradigma de objeto para mediados de los 90s. Esto se debi\u00f3 a que los sistemas que se dise\u00f1aban con esta mentalidad y estilo eran m\u00e1s mantenibles en el tiempo y permit\u00edan sumar nuevas personas al desarrollo sin tanta fricci\u00f3n al proceso. Definiciones: Veamos un poco de terminolog\u00eda b\u00e1sica. Objeto: Es la unidad b\u00e1sica del paradigma. Se define como una estructura porpia que debe cumplir con lo siguiente: - Debe poseer un estado interno - Debe poseer un comportamiento. Responder ante mensajes del exterior. - Debe tener una identidad. Una forma de unicidad que identifique a cada objetos \u00fanico. En Python esto se logra utilizando el tipo class . M\u00e9todo: Es el comportamiento que le otorgamos a cada objeto. class MyClass : def greet ( self ): print ( 'hello!' ) En este caso la funci\u00f3n greet es un m\u00e9todo definido para objetos de tipo MyClass . Atributo: Son los estados (valores) que un objeto puede poseer. class MyClass : def __init__ ( self ): self . name = 'santi' instance = MyClass () print ( instance . name ) # muestra 'santi' En este caso, vemos que un objeto de tipo MyClass tiene un atributo name el cual puede ser accedido utilizando el operador . . Note Si te estas preguntando que es self o __init__ , paciencia ... lo veremos m\u00e1s adelante. Fundamentos del paradigma: El fundamento principal del paradigma es que todo es un objeto el cual puede tener un estado interno y exponer m\u00e9todos para aceptar interacciones con otros objetos. Sacando lo pomposo de la frase, ustedes ya conocen algunos objetos como son list o dict . Ustedes no saben como funcionan por dentro, a\u00fan as\u00ed presentan una variedad de m\u00e9todos para comunicarnos con ellos y obtener cosas de los mismos. Tambi\u00e9n sabemos que tiene un estado internos que no nos exponen ya que de alguna forma est\u00e1n guardando los elementos que les pedimos. A partir de esta frase, nacen 4 pialares con los cuales intentamos dise\u00f1ar las soluciones orientadas a objetos. Estos son confusos (parecen escritos por Yoda, pero tienen sentido una vez que se acostumbran). Encapsulamiento Los objetos deben presentar una interfaz con la cual otros puedan comunicarse sin necesidad de entender su implementaci\u00f3n. La implementaci\u00f3n de c\u00f3digo no debe ser accesible por quien no corresponde. Es decir, si un m\u00e9todo de una clase solo sirve para si misma y no debe ser utilizada por otros objetos. Cuando llamamos a un m\u00e9todo, no nos interesa su implementaci\u00f3n sino lo que esperamos del mismo. class Contador : def __init__ ( self ): self . __counter = 0 def add_item ( self ): self . __counter += 1 def del_item ( self ): if self . __counter > 0 : self . __counter -= 1 def get_counter ( self ) -> int : return self . __counter nuevo_contador = Contador () nuevo_contador . add_item () nuevo_contador . del_item () print ( 'el contador esta en ' , nuevo_contador . get_counter ()) Obs En este contexto, el usuario de nuevo_contador no se preocupa por la implementaci\u00f3n de del_item . En cambio, conf\u00eda en lo que este m\u00e9todo debe hacer y lo invoca para que cumpla su labor. Abstracci\u00f3n El estado de un objeto solo debe ser visible a quien corresponda e inaccesible a quien no. Cada objeto tiene la potestad de ocultar o exponer estados para que otros accedan o no. Es por este motivo que el comportamiento que necesite de un cierto conjunto de valores, usualmente va en el mismo objeto. De esa forma todos comparten visibilidad sobre los mismo valores. En el ejemplo previo, vimos que definimos y utilizamos un estado interno llamado __counter , el mismo no se expone al usuario de nuestra clase. En cambio, definimos m\u00e9todos para que interactuen con este valor, de froma que tenemos el control sobre como var\u00eda el valor. Obs El uso de __ como comienzo del nombre de atributos dentro de la clase define que no deben ser accedidos por entidades fuerda del objeto. Son valores que solo le conciernen al propio objeto. Esto es el concepto de scope para atributos. Polimorfismo Se refiere a la independencia entre el tipo de un objeto y el m\u00e9todo que deseamos ejecutar. Si tenemos multiples objetos que soportan el mismo m\u00e9todo y ejecutan el mismo comportamiento, aquel que invoque a dicho comportamiento no debe preocuparse de que tipo es exactamente el objeto al cual est\u00e1 llamando. class Brid : def fly ( self ): pass def count_wings ( self ): return 2 class Parrot ( Brid ): def ( self ): print ( \"flying slowly\" ) class Hummingbird ( Brid ): def fly ( self ): print ( \"flying really fast\" ) # common interface def flying_test ( bird : Brid ): bird . fly () #instantiate objects blu = Parrot () peggy = Hummingbird () # passing the object flying_test ( blu ) flying_test ( peggy ) En este ejemplo, vemos que flyin_test no necesita saber exactamente que tipo es el objeto sobre el que est\u00e1 efectuando el llamado al m\u00e9todo fly() sino que conf\u00eda en que el objeto implementa el m\u00e9todo de la forma adecuada para su caso. Obs Este tambi\u00e9n es un caso de herencia, en el cual ambos objetos blu y peggy tienen el m\u00e9todo count_wings a su disposici\u00f3n dado que ambos son instancias de clases que heredan de Bird . Inheritance & Composition Refiere a la habilidad de los objetos de obtener caracter\u00edsticas de otros objetos. Generalmente, utilizamos esta habilidad para definir comportamientos comunes entre varios objetos. En el caso de composition esto se logra teniendo un objeto como atributo de otro objeto, mientras que en inheritance logramos esto a trav\u00e9s de la herencia de comportamiento y atributos. class Engine : def acelerate ( self ): ... def slow_down ( self ): ... class Car : def __init__ ( self ): self . engine = Engine () En este caso utilizamos la composici\u00f3n para lograr que la clase Car tenga disponible un Engine y su funcionalidad sin tener que realmente escribirla como parte de la clase Car .","title":"Introducci\u00f3n"},{"location":"oop/intro/#programacion-orientada-a-objetos","text":"En esta secci\u00f3n veremos los conceptos b\u00e1sicos de Programaci\u00f3n orientada a objetos (OOP en ingl\u00e9s). El objetivo es entender que es el paradigma, que intenta solucionar y cuales son sus fundamentos.","title":"Programaci\u00f3n Orientada a Objetos:"},{"location":"oop/intro/#un-poco-de-historia","text":"En la prehisotria, cuando los primeros homosapiens comenzaron a darse cuenta que escribir c\u00f3digo es \u00fatil, las empresas comenzaron a tener servidores (los denominados main frames ) y contratar muchas personas para manejar dichos servidores y reemplazar tareas administrativas como operaciones contables o tareas repetitivas. Ya para la decada de 1980 gran parte de la sociendad se encontraba en proceso de digitalizaci\u00f3n, para este momento los programas hab\u00eda empezado a escalar en complejidad y la cantidad de personas manejando dichos sistemas. Esta complejizaci\u00f3n llev\u00f3 a que se dificulte cada vez m\u00e1s pensar en programas que funcionen utilizando el paradigma procedural (el que ya conocen). Esta nueva complejidad, sistemas que empezaban a tener a\u00f1os en servicio y muchas lineas de c\u00f3digo, impuls\u00f3 a que se busque una nueva forma de encarar el desarrollo de aplicaciones para el sector. Esta b\u00fasqueda culmin\u00f3 en la adopci\u00f3n del paradigma de objeto para mediados de los 90s. Esto se debi\u00f3 a que los sistemas que se dise\u00f1aban con esta mentalidad y estilo eran m\u00e1s mantenibles en el tiempo y permit\u00edan sumar nuevas personas al desarrollo sin tanta fricci\u00f3n al proceso.","title":"Un poco de historia:"},{"location":"oop/intro/#definiciones","text":"Veamos un poco de terminolog\u00eda b\u00e1sica.","title":"Definiciones:"},{"location":"oop/intro/#objeto","text":"Es la unidad b\u00e1sica del paradigma. Se define como una estructura porpia que debe cumplir con lo siguiente: - Debe poseer un estado interno - Debe poseer un comportamiento. Responder ante mensajes del exterior. - Debe tener una identidad. Una forma de unicidad que identifique a cada objetos \u00fanico. En Python esto se logra utilizando el tipo class .","title":"Objeto:"},{"location":"oop/intro/#metodo","text":"Es el comportamiento que le otorgamos a cada objeto. class MyClass : def greet ( self ): print ( 'hello!' ) En este caso la funci\u00f3n greet es un m\u00e9todo definido para objetos de tipo MyClass .","title":"M\u00e9todo:"},{"location":"oop/intro/#atributo","text":"Son los estados (valores) que un objeto puede poseer. class MyClass : def __init__ ( self ): self . name = 'santi' instance = MyClass () print ( instance . name ) # muestra 'santi' En este caso, vemos que un objeto de tipo MyClass tiene un atributo name el cual puede ser accedido utilizando el operador . . Note Si te estas preguntando que es self o __init__ , paciencia ... lo veremos m\u00e1s adelante.","title":"Atributo:"},{"location":"oop/intro/#fundamentos-del-paradigma","text":"El fundamento principal del paradigma es que todo es un objeto el cual puede tener un estado interno y exponer m\u00e9todos para aceptar interacciones con otros objetos. Sacando lo pomposo de la frase, ustedes ya conocen algunos objetos como son list o dict . Ustedes no saben como funcionan por dentro, a\u00fan as\u00ed presentan una variedad de m\u00e9todos para comunicarnos con ellos y obtener cosas de los mismos. Tambi\u00e9n sabemos que tiene un estado internos que no nos exponen ya que de alguna forma est\u00e1n guardando los elementos que les pedimos. A partir de esta frase, nacen 4 pialares con los cuales intentamos dise\u00f1ar las soluciones orientadas a objetos. Estos son confusos (parecen escritos por Yoda, pero tienen sentido una vez que se acostumbran).","title":"Fundamentos del paradigma:"},{"location":"oop/intro/#encapsulamiento","text":"Los objetos deben presentar una interfaz con la cual otros puedan comunicarse sin necesidad de entender su implementaci\u00f3n. La implementaci\u00f3n de c\u00f3digo no debe ser accesible por quien no corresponde. Es decir, si un m\u00e9todo de una clase solo sirve para si misma y no debe ser utilizada por otros objetos. Cuando llamamos a un m\u00e9todo, no nos interesa su implementaci\u00f3n sino lo que esperamos del mismo. class Contador : def __init__ ( self ): self . __counter = 0 def add_item ( self ): self . __counter += 1 def del_item ( self ): if self . __counter > 0 : self . __counter -= 1 def get_counter ( self ) -> int : return self . __counter nuevo_contador = Contador () nuevo_contador . add_item () nuevo_contador . del_item () print ( 'el contador esta en ' , nuevo_contador . get_counter ()) Obs En este contexto, el usuario de nuevo_contador no se preocupa por la implementaci\u00f3n de del_item . En cambio, conf\u00eda en lo que este m\u00e9todo debe hacer y lo invoca para que cumpla su labor.","title":"Encapsulamiento"},{"location":"oop/intro/#abstraccion","text":"El estado de un objeto solo debe ser visible a quien corresponda e inaccesible a quien no. Cada objeto tiene la potestad de ocultar o exponer estados para que otros accedan o no. Es por este motivo que el comportamiento que necesite de un cierto conjunto de valores, usualmente va en el mismo objeto. De esa forma todos comparten visibilidad sobre los mismo valores. En el ejemplo previo, vimos que definimos y utilizamos un estado interno llamado __counter , el mismo no se expone al usuario de nuestra clase. En cambio, definimos m\u00e9todos para que interactuen con este valor, de froma que tenemos el control sobre como var\u00eda el valor. Obs El uso de __ como comienzo del nombre de atributos dentro de la clase define que no deben ser accedidos por entidades fuerda del objeto. Son valores que solo le conciernen al propio objeto. Esto es el concepto de scope para atributos.","title":"Abstracci\u00f3n"},{"location":"oop/intro/#polimorfismo","text":"Se refiere a la independencia entre el tipo de un objeto y el m\u00e9todo que deseamos ejecutar. Si tenemos multiples objetos que soportan el mismo m\u00e9todo y ejecutan el mismo comportamiento, aquel que invoque a dicho comportamiento no debe preocuparse de que tipo es exactamente el objeto al cual est\u00e1 llamando. class Brid : def fly ( self ): pass def count_wings ( self ): return 2 class Parrot ( Brid ): def ( self ): print ( \"flying slowly\" ) class Hummingbird ( Brid ): def fly ( self ): print ( \"flying really fast\" ) # common interface def flying_test ( bird : Brid ): bird . fly () #instantiate objects blu = Parrot () peggy = Hummingbird () # passing the object flying_test ( blu ) flying_test ( peggy ) En este ejemplo, vemos que flyin_test no necesita saber exactamente que tipo es el objeto sobre el que est\u00e1 efectuando el llamado al m\u00e9todo fly() sino que conf\u00eda en que el objeto implementa el m\u00e9todo de la forma adecuada para su caso. Obs Este tambi\u00e9n es un caso de herencia, en el cual ambos objetos blu y peggy tienen el m\u00e9todo count_wings a su disposici\u00f3n dado que ambos son instancias de clases que heredan de Bird .","title":"Polimorfismo"},{"location":"oop/intro/#inheritance-composition","text":"Refiere a la habilidad de los objetos de obtener caracter\u00edsticas de otros objetos. Generalmente, utilizamos esta habilidad para definir comportamientos comunes entre varios objetos. En el caso de composition esto se logra teniendo un objeto como atributo de otro objeto, mientras que en inheritance logramos esto a trav\u00e9s de la herencia de comportamiento y atributos. class Engine : def acelerate ( self ): ... def slow_down ( self ): ... class Car : def __init__ ( self ): self . engine = Engine () En este caso utilizamos la composici\u00f3n para lograr que la clase Car tenga disponible un Engine y su funcionalidad sin tener que realmente escribirla como parte de la clase Car .","title":"Inheritance &amp; Composition"},{"location":"projects/song-recommendation/","text":"Recomendador de m\u00fasica: Contexto La m\u00fasica es una expresi\u00f3n arm\u00f3nica de sonidos que nos generan sensaciones .... b\u00e1sicamente nos gusta esuchar m\u00fasica. En la antig\u00fcedad (principios de los 2000, omita hacer comentarios al profesor para que el mismo no tenga un mental break down), la gente sol\u00eda recomendar canciones por el boca a boca , teniendo que comprar el formato f\u00edsico para poder escuchar dicha m\u00fasica. Si te gust\u00f3 este alb\u00fam, compr\u00e1 \"X\" que seguro te gusta Hoy en d\u00eda la frase que nos indica la plataforma de streaming que deseen utilizar es un poco diferente: Porque te gustaron \"A\", \"B\" y \"C\", te recomendamos \"Z\" Esto se debe a que con la tecnolog\u00eda, los sistemas de recomendaci\u00f3n crecieron en utilidad masivamente. Siendo hoy en d\u00eda una de las principales features de ciertos productos y los drivers de gran cantidad de ganancias. Piensen en: Mercado libre => Productos que te puedan gustar , es uno de los mayores hooks de la plataforma. Spotify => Only for you , las recomendaciones weekly son su principal forma de exponer usuarios a nuevos gustos. Netflix => En 2017 el 70% de su revenue provino de las recomendaciones que generaron a sus usuarios. Entonces, porque no intentamos hacer nuestras propias recomendaciones? .... Objetivo El objetivo de este proyecto es comenzar a entender como podemos dar recomendaciones utilizando datos y software para el proceso. Utilizaremos un modelo de inteligencia artificial para predecir canciones que puedan ser de inter\u00e9s para el usuario; el mismo deber\u00e1 indicar algunas canciones que hoy en d\u00eda le gusten y determinaremos 5 canciones nuevas para escuchar. Nuestro programa tendr\u00e1 una interfaz por consola donde pediremos los datos inciales y luego daremos nuestra recomendaci\u00f3n. Note Las recomendaciones que generaremos en este proyecto no ser\u00e1n excelentes y hay mucho para mejorar, pero es una primera aproximaci\u00f3n al concepto de recomendaciones. Como vamos a recomendar canciones .... El modelo: KNN Para las recomendaciones nos basaremos en un modelo tradicional de Machine Learning llamado KNN (K Nearest Neighbours). El modelo es muy simple, para entenderlo primero debemos revisar cual es el problema que resuelve: problema Si tenemos un conjunto de puntos que pertencen a distintas clases (entiendan clase como la asignaci\u00f3n de alg\u00fan tipo de etiqueta) y aparece un nuevo elemento el cual desconocemos su clase, pero queremos asignarle alguna de las que ya existen. Este es el problema que intenta resolver el algortimo de KNN. El approach que toma dicho algoritmo es el siguiente: Dado el nuevo punto (piensen en los puntos como coordenadas en un mapa), tomo los K (por eso la \"K\" en el nombre) puntos m\u00e1s cercanos (estos son los vecinos ... por eso el \"NN\" del nombre). Luego cuento cuanta cantidad de esos \"vecinos\" pertenecen a cada clase. Determino que la clase del nuevo punto es la clase que m\u00e1s veces aparezca entre sus vecinos. Notese que el m\u00e9todo definido aqu\u00ed es la implementaci\u00f3n m\u00e1s b\u00e1sica y hay muchas optimizaciones posibles. Note El K en el algoritmo es un par\u00e1metro, significa que a la hora de correr el algoritmo debemos especificar que valor queremos que tome K . Mientras m\u00e1s grande k m\u00e1s espec\u00edfico tiende a ser el resultado. Mientras menos k tomemeos, tiende a ser m\u00e1s r\u00e1pido. De donde sacamos las canciones: El dataset que utilizaremos provine de la plataforma Kaggle , donde la empresa Spotify public\u00f3 una competencia para ver quien era capaz de generar un modelo de recomendaciones mejor que el que ten\u00edan. Esta es una practica conocida por empresa y si les interesa busquen la historia de Netflix: 1 Million prize . El dataset contiene al rededor de 100 mil canciones, de las cuales nos otrogan los siguientes datos: duration_ms : duraci\u00f3n de la canci\u00f3n en milisegundos. key : The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f/ D\u266d, 2 = D, and so on. If no key was detected, the value is -1. mode : indica la modalidad (major o minor) de la canci\u00f3n. Es la escala mel\u00f3dica en la que se deriva la canci\u00f3n. y esta representado por 1 (major) y 0 (minor). time_signature : Es la firma temporal de la canci\u00f3n. Es una notaci\u00f3n formdada por una conveci\u00f3n para aclarar cuantos beats se muestran por cada medici\u00f3n de la canci\u00f3n. acousticness : una medida de confianza entre 0.0 y 1.0 de si la canci\u00f3n es acustica o no. danceability : Es una medida entre 0.0 y 1.0 que describe que tan buena es al canci\u00f3n para bailar en base a varios factores, como el ritmo, los decibeles, la regularidad, etc. energy : Es una medida de 0.0 a 1.0 que representa que tan r\u00e1pida, ruidosa y fuerte es la canci\u00f3n. Death metal tiene un valor alto mientras que Blues usualemnte un valor bajo. instrumentalness : Valor entre 0.0 y 1.0 que determina la confianza de que la canci\u00f3n sea instrumental pura o tenga partes de canto. liveness : Valor entre 0.0 y 1.0 para detectar la precencia de audiencia en la canci\u00f3n. Valores superiores a 0.8 son considerados live performance . loudness : El valor promedio de decibeles de la canci\u00f3n. (entre -60 y 0) speechiness : valor de confianza entre 0.0 y 1.0 de que el audio de la canci\u00f3n sea puramente voz. valence : valor entre 0.0 y 1.0 que describe la positividad de la canci\u00f3n (canciones felices, alegres, etc). tempo : El tempo promedio de la canci\u00f3n descrito en BPM (beats per minute). Vea el siguiente link para entender id : Spotify ID. popularity : La popularidad se mide de 0 a 100, canciones que fueron recientemente muy escuchadas tienden a tener un valor m\u00e1s alto. Como voy a utilizar esto para recomendar: A este punto entendemos el funcionamiento b\u00e1sico de KNN pero surge la pregunta .... como esta asignaci\u00f3n de \"clases\" se relaciona con mi objetivo de recomendar canciones a alguien. Por ahora entendemos que KNN necesita \"puntos\" que tengan alg\u00fan tipo de etiqueta y que lo \u00fanico que hace es etiquetar un nuevo punto en base a los anteriores. Pero el algoritmo funciona sobre coordenadas en un plano, vectores matem\u00e1ticos y nosotros tenemos canciones que lejos estan de ser vectores... o tal vez no. Ahora, si me acompa\u00f1anan en el siguiente viaje astral por una analog\u00eda .... Que pasa si tomamos una canci\u00f3n y la transformamos en una serie de caracter\u00edsticas como por ejemplo: el tempo el a\u00f1o el g\u00e9nero el pitch el nombre de la banda que la interpreta sucesivas caracter\u00edsticas... De esta forma podr\u00edamos representar una canci\u00f3n como un vector , donde cada columna representa el valor de cada una de estas caracter\u00edsticas. Donde asumimos que cada columna representa una dimensi\u00f3n distinta, una dimensi\u00f3n en la logitud de la canci\u00f3n, otra dimensi\u00f3n es la banda, otra es el g\u00e9nero, otra es el a\u00f1o. Entonces podemos pensar que la comparaci\u00f3n entre dos canciones pasar\u00eda de ser: Canci\u00f3n \"A\", escrita por banda X en el a\u00f1o 1990, del g\u00e9nero tanto puede llegar a parecerse a esta otra canci\u00f3n \"B\" de la banda Z en el a\u00f1o 2010 de g\u00e9nero tanto. ahora ser\u00eda algo como: [1, 1990, 13, 3.12] [45, 2010, 5 , 2.6] donde el primer valor representa el pitch, el segundo el a\u00f1o de lanzamiento, el tercero el tempo y el ultimo la duraci\u00f3n en minutos. Veamos como ahora pasamos de tener un problema cotidiano en una definici\u00f3n matem\u00e1tica. Ahora, si hacemos esto para todas las canciones que queramos, pasar\u00edamos a tener .... un mont\u00f3n de puntos en un mapa. Dado que aprendimos en Algebra [ Fear of Juan intesifies ] que podemos tomar la distancia entre 2 vectores. La forma m\u00e1s tradicional ser\u00eda utilizando la distancia euclidea. Enotnces, si frenamos un segundo en nuestro viaje astral nos podemos dar cuenta que pasamos de tener un mont\u00f3n de canciones a un mont\u00f3n de puntos en un plano matem\u00e1tico a los cuales puedo tomarle disntacias para encontrar los \"vecinos\". Es decir, que ya estamos muy cerca de poder lograr aplicar KNN, pero ahora nos falta dar una \"etiqueta\" a cada canci\u00f3n. Aunque seguimos con el problema de que no tenemos etiquetas para utilizar ... Que pasa si usamos como etiqueta de cada canci\u00f3n: \"le gusta al usuario\" \"no le gusta al usuario\" .... Ahora ... como sabemos que canciones le gusta al usuario y cuales no? bueno, este es el arte (lease m\u00e1gia oscura) que hacen las empresas para solucionar el denominado problema: cold start . En nuestro caso, simplemente le vamos a pedir al usuario que nos indique N cantidad de canciones que le gustaron o no. Otra forma es pedir al usuario que nos indique canciones que le gustan y tomar un random de canciones que vamos a considerar como que no le gustan, esta t\u00e9cnica es \u00fatil cuando tu dataset es tan grande que la probabilidad de que tomes un punto que pertenezca al conjunto de \"no inter\u00e9s\" es alta. Para resumir nuestro viaje astral: Vamos a tomar canciones y seg\u00fan caracter\u00edsticas num\u00e9ricas que tengan como son, el a\u00f1o de lanzamiento, la duraci\u00f3n de la canci\u00f3n, el pitch, entre otras obtendremos un vector num\u00e9rico que represente a cada canci\u00f3n. Luego, con ayuda del usuario tomaremos un par de canciones (vectores) y les pondremos la etiqueta de \"le gustan al usuario\". Acto seguido, tomaremos una muestra al azar de canciones no seleccionadas y diremos que estas \"no le gustan la usuario\". Esto es una heur\u00edstica simple que tomamos, podr\u00edamos tomar otras alternativas para conseguir etiquetas ciertas canciones como \"no le gustan\". Finalmente, utilizaremos KNN para \"predecir\" la etitqueta (le gusta o no le gusta) de las canciones que no est\u00e1n etiquetadas. Estrategia: Ahora que tenemos una idea de hacia donde vamos y que herramientas vamos a utilizar, debemos plantearnos como vamos a encarar este desarrollo . Separation of concerns: Lo primero que hacemos es entender la separaci\u00f3n de \"dominios\" que tiene la app. En este caso, entendemos que nuestro desarrollo tiene las siguientes capas Notice Un Capas se refiere a el set de herramientas pertinentes a un area de nuestro problema el cual puede quedar separado del resto de nuestro problema. Por ejemplo: - el modelo predictor que utilicemos - el conjunto de modulos o funciones que utilizaremos para interactuar con el usuario - el conjunto de modulos o funciones que utilizaremos para obtener los datos Una vez que tenemos estos conceptos claros, por el siguiente paso. MVP y KISS: Cuando hacemos un desarrollo pensamos en la m\u00ednima implementaci\u00f3n de funcionalidades que logran nuestro objetivos. En este caso la minima funcionalidad que queremos es: Dado un conjunto presetteado de canciones que tomaremos como (canciones que gustan al usuario) Generar un conjunto de 3 canciones a recomendar. Medir la calidad de nuestras recomendaciones. En la industria, MVP se refiere al producto minimo viable (MVP por sus siglas en ingles). Para nuestro caso, esto se traduce en las 3 funcionalidades mencionadas. Para generar este desarrollo intentaremos mantener la implementaci\u00f3n lo m\u00e1s sencilla posible y en base a un modelo funcional iremos modificando la soluci\u00f3n para hacerla mejor. Esto es el principio de KISS (Keep It Simpel ... Stupid). Iteraciones r\u00e1pidas: En el desarrollo de software hay que intentar acortar el loop de desarrollo, que comprende el ciclo desde crear una funcionalidad y obtener el feedback del usuario. En este caso, nuestro desarrollo se basa en generar c\u00f3digo, testear que puedo levantar datos, que puedo tomar informaci\u00f3n del usuario y que nuestro modelo efectivamente funciona y entrega buenos resultados. Desarrollo: El desarrollo de este sistema queda enteramente abierto a gusto del lector, en la siguiente secci\u00f3n simplemente iremos viendo un posible esquema de trabajo el cual plantea obtener el mayor apredizaje del ejercicio. Iteraci\u00f3n 1 En la primera versi\u00f3n de nuestro sistema de recomendaci\u00f3n tendremos un programa que dado un input explicito (hardcoded) que representa las canciones que le gustan al usuario. Devolveremos una recomendaci\u00f3n, dicha recomendaci\u00f3n ser\u00e1 simplemente una selecci\u00f3n random de canciones. El esquema al finalizar esta etapa ser\u00e1: Al correr el programa no debemos ingresar datos. En pantalla nos aparecen las canciones preseleccionadas como que \"le gustan al usuario\" Nos aparecen las 5 recomendaciones de canciones. El programa imprime un score de que tan buena es la recomendaci\u00f3n. (vean la siguiente secci\u00f3n) Note El modelo b\u00e1sico que devuelve una selecci\u00f3n random es muy importante, dado que nos deja entender como interactuar con el modelo de recomendaci\u00f3n dentro de nuestra soluci\u00f3n. Entiendan en que parte del programa vamos a utilizar este algoritmo y su rol en el mismo. Como testear que un modelo funciona: Uno de los problemas emergentes por la naturaleza de nuestro proyecto es ... saber como determinar si realmente estamos dando una buena recomendaci\u00f3n. Esto es un problema recurrente de Machine Learning y es algo que extensamente ver\u00e1n en materias posteriores, por lo que para nuestro caso de uso haremos una heur\u00edstica simple. Para dar un score a nuestra recomendaci\u00f3n debemos plantear: que consideramos bueno en una recomendaci\u00f3n . Para nuestro ejemplo simple, podemos tomar que una recomendaci\u00f3n es buena si la energ\u00eda ( energy ) de la recomendaci\u00f3n son parecidas al promedio de las canciones que el usuario seleccion\u00f3 como \"que le gustan\". Dado que usualmente las personas tieneden a buscar un cierto tipo de m\u00fasica en particular, este ser\u00eda un buen primer approach. Notese que esta heur\u00edstica puede tornarse tan complicada como queramos. Finalemente deberiamos tener una especi de funci\u00f3n que tenga al siguiente firma: def is_good_recom(song, parametros extra que deseemos) -> bool: ... En este caso song ser\u00e1 el vector que represente la canci\u00f3n que recomienda el modelo y simplemente devolver\u00e1 el valor True si cumple con nuestro criterio de \"recomendaci\u00f3n buena\" y False caso contrario. Finalmente el score de la recomendaci\u00f3n completa (las 5 canciones) ser\u00e1 simplemnte la cantidad de aciertos ( True ) sobre la cantidad de canciones recomendadas (5/5 es la m\u00e1xima y 0/5 es la m\u00ednima). Iteraci\u00f3n 2: En esta etapa nos centraremos en permitirle al usuario seleccionar canciones, es decir que queremos eliminar la partde hard coded y dejarle al usuario ingresar el nombre de la canci\u00f3n que desea. Al finalizar esta etapa tendremos: El usuario ingres el nombre exacto de una canci\u00f3n dentro de nuestra lista de canciones. El usuario repite el paso previo 5 veces El programa retorna una lista de 5 recomendaciones. obtenemos el score de nuestras recomendaciones. Nuevamente, utilziaremos el modelo de seleci\u00f3n al azar de canciones. Porque todav\u00eda no nos aporta valor, si el usuario es incapaz de interactuar con el sistema para ingresar que canciones le gusta... no importa que tan bueno sea nuestro modelo el usuario nunca lo podr\u00e1 usar. Es como construir un motor Formula 1 cuando todav\u00eda no ten\u00e9s ni un chasis donde montarlo. Concentrarse en permitir seleccionar las canciones de la lista de canciones, puntos extra si podemos seleccionar sin importar si ingresamos may\u00fasculas o no. Iteraci\u00f3n 3: En esta iteraci\u00f3n ahora si veremos de implementar una versi\u00f3n b\u00e1sica del algoritmo KNN para nuestro problema. Una versi\u00f3n de prueba se encuentra disponible en el repositorio de tutorial, bajo la secci\u00f3n \"proyectos/recomendador\". Al finalizar esta etapa tendremos: El usuario ingres el nombre exacto de una canci\u00f3n dentro de nuestra lista de canciones. El usuario repite el paso previo 5 veces El programa retorna una lista de 5 recomendaciones. obtenemos el score de nuestras recomendaciones. En esta etapa debemos ver mejoras en nuestro score final, de no ser as\u00ed modificar el K hasta lograr mejoras con respecto a valores previos. Iteraci\u00f3n 4: A esta altura tenemos un programa funciona, ahora podemos focalizarnos en hacerlo m\u00e1s f\u00e1cil de utilizar con mejoras como: Permitir al usuario ingresar parte del nombre de la canci\u00f3n y mostrarle posbles nombres y dejarlo seleccionar el que quiera. Mejorar nuestra impelmentaci\u00f3n de KNN utilizando un K m\u00e1s alto o teniendo encuenta la \"nota al final de la secci\u00f3n\". hacer m\u00e1s eficiente el algoritmo de b\u00fasqued de KNN que tenemos implementado en al versi\u00f3n b\u00e1sica. Muchas m\u00e1s. Note El KNN que vimos hasta ahora no tiene en cuenta la distancia entre el punto que estamos analizando y los \"vecinos\" que encontramos. Si tomamos 5 vecinos para determinar cual es la clase de un punto pero de los 5, 3 estan muy lejos del punto y 2 est\u00e1 casi pegados las chances son que la clase correcta sea la de los 2 puntos m\u00e1s pr\u00f3ximos aunque en nuestra versi\u00f3n diremos que la clase sea la de los 3 puntos m\u00e1s lejanos (asumiendo que los 3 puntos lejanos son de la misma clase y los 2 puntos cercanos son de otra clase distinta). Happy Coding!","title":"Recomendador"},{"location":"projects/song-recommendation/#recomendador-de-musica","text":"","title":"Recomendador de m\u00fasica:"},{"location":"projects/song-recommendation/#contexto","text":"La m\u00fasica es una expresi\u00f3n arm\u00f3nica de sonidos que nos generan sensaciones .... b\u00e1sicamente nos gusta esuchar m\u00fasica. En la antig\u00fcedad (principios de los 2000, omita hacer comentarios al profesor para que el mismo no tenga un mental break down), la gente sol\u00eda recomendar canciones por el boca a boca , teniendo que comprar el formato f\u00edsico para poder escuchar dicha m\u00fasica. Si te gust\u00f3 este alb\u00fam, compr\u00e1 \"X\" que seguro te gusta Hoy en d\u00eda la frase que nos indica la plataforma de streaming que deseen utilizar es un poco diferente: Porque te gustaron \"A\", \"B\" y \"C\", te recomendamos \"Z\" Esto se debe a que con la tecnolog\u00eda, los sistemas de recomendaci\u00f3n crecieron en utilidad masivamente. Siendo hoy en d\u00eda una de las principales features de ciertos productos y los drivers de gran cantidad de ganancias. Piensen en: Mercado libre => Productos que te puedan gustar , es uno de los mayores hooks de la plataforma. Spotify => Only for you , las recomendaciones weekly son su principal forma de exponer usuarios a nuevos gustos. Netflix => En 2017 el 70% de su revenue provino de las recomendaciones que generaron a sus usuarios. Entonces, porque no intentamos hacer nuestras propias recomendaciones? ....","title":"Contexto"},{"location":"projects/song-recommendation/#objetivo","text":"El objetivo de este proyecto es comenzar a entender como podemos dar recomendaciones utilizando datos y software para el proceso. Utilizaremos un modelo de inteligencia artificial para predecir canciones que puedan ser de inter\u00e9s para el usuario; el mismo deber\u00e1 indicar algunas canciones que hoy en d\u00eda le gusten y determinaremos 5 canciones nuevas para escuchar. Nuestro programa tendr\u00e1 una interfaz por consola donde pediremos los datos inciales y luego daremos nuestra recomendaci\u00f3n. Note Las recomendaciones que generaremos en este proyecto no ser\u00e1n excelentes y hay mucho para mejorar, pero es una primera aproximaci\u00f3n al concepto de recomendaciones.","title":"Objetivo"},{"location":"projects/song-recommendation/#como-vamos-a-recomendar-canciones","text":"","title":"Como vamos a recomendar canciones ...."},{"location":"projects/song-recommendation/#el-modelo-knn","text":"Para las recomendaciones nos basaremos en un modelo tradicional de Machine Learning llamado KNN (K Nearest Neighbours). El modelo es muy simple, para entenderlo primero debemos revisar cual es el problema que resuelve: problema Si tenemos un conjunto de puntos que pertencen a distintas clases (entiendan clase como la asignaci\u00f3n de alg\u00fan tipo de etiqueta) y aparece un nuevo elemento el cual desconocemos su clase, pero queremos asignarle alguna de las que ya existen. Este es el problema que intenta resolver el algortimo de KNN. El approach que toma dicho algoritmo es el siguiente: Dado el nuevo punto (piensen en los puntos como coordenadas en un mapa), tomo los K (por eso la \"K\" en el nombre) puntos m\u00e1s cercanos (estos son los vecinos ... por eso el \"NN\" del nombre). Luego cuento cuanta cantidad de esos \"vecinos\" pertenecen a cada clase. Determino que la clase del nuevo punto es la clase que m\u00e1s veces aparezca entre sus vecinos. Notese que el m\u00e9todo definido aqu\u00ed es la implementaci\u00f3n m\u00e1s b\u00e1sica y hay muchas optimizaciones posibles. Note El K en el algoritmo es un par\u00e1metro, significa que a la hora de correr el algoritmo debemos especificar que valor queremos que tome K . Mientras m\u00e1s grande k m\u00e1s espec\u00edfico tiende a ser el resultado. Mientras menos k tomemeos, tiende a ser m\u00e1s r\u00e1pido.","title":"El modelo: KNN"},{"location":"projects/song-recommendation/#de-donde-sacamos-las-canciones","text":"El dataset que utilizaremos provine de la plataforma Kaggle , donde la empresa Spotify public\u00f3 una competencia para ver quien era capaz de generar un modelo de recomendaciones mejor que el que ten\u00edan. Esta es una practica conocida por empresa y si les interesa busquen la historia de Netflix: 1 Million prize . El dataset contiene al rededor de 100 mil canciones, de las cuales nos otrogan los siguientes datos: duration_ms : duraci\u00f3n de la canci\u00f3n en milisegundos. key : The estimated overall key of the track. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f/ D\u266d, 2 = D, and so on. If no key was detected, the value is -1. mode : indica la modalidad (major o minor) de la canci\u00f3n. Es la escala mel\u00f3dica en la que se deriva la canci\u00f3n. y esta representado por 1 (major) y 0 (minor). time_signature : Es la firma temporal de la canci\u00f3n. Es una notaci\u00f3n formdada por una conveci\u00f3n para aclarar cuantos beats se muestran por cada medici\u00f3n de la canci\u00f3n. acousticness : una medida de confianza entre 0.0 y 1.0 de si la canci\u00f3n es acustica o no. danceability : Es una medida entre 0.0 y 1.0 que describe que tan buena es al canci\u00f3n para bailar en base a varios factores, como el ritmo, los decibeles, la regularidad, etc. energy : Es una medida de 0.0 a 1.0 que representa que tan r\u00e1pida, ruidosa y fuerte es la canci\u00f3n. Death metal tiene un valor alto mientras que Blues usualemnte un valor bajo. instrumentalness : Valor entre 0.0 y 1.0 que determina la confianza de que la canci\u00f3n sea instrumental pura o tenga partes de canto. liveness : Valor entre 0.0 y 1.0 para detectar la precencia de audiencia en la canci\u00f3n. Valores superiores a 0.8 son considerados live performance . loudness : El valor promedio de decibeles de la canci\u00f3n. (entre -60 y 0) speechiness : valor de confianza entre 0.0 y 1.0 de que el audio de la canci\u00f3n sea puramente voz. valence : valor entre 0.0 y 1.0 que describe la positividad de la canci\u00f3n (canciones felices, alegres, etc). tempo : El tempo promedio de la canci\u00f3n descrito en BPM (beats per minute). Vea el siguiente link para entender id : Spotify ID. popularity : La popularidad se mide de 0 a 100, canciones que fueron recientemente muy escuchadas tienden a tener un valor m\u00e1s alto.","title":"De donde sacamos las canciones:"},{"location":"projects/song-recommendation/#como-voy-a-utilizar-esto-para-recomendar","text":"A este punto entendemos el funcionamiento b\u00e1sico de KNN pero surge la pregunta .... como esta asignaci\u00f3n de \"clases\" se relaciona con mi objetivo de recomendar canciones a alguien. Por ahora entendemos que KNN necesita \"puntos\" que tengan alg\u00fan tipo de etiqueta y que lo \u00fanico que hace es etiquetar un nuevo punto en base a los anteriores. Pero el algoritmo funciona sobre coordenadas en un plano, vectores matem\u00e1ticos y nosotros tenemos canciones que lejos estan de ser vectores... o tal vez no. Ahora, si me acompa\u00f1anan en el siguiente viaje astral por una analog\u00eda .... Que pasa si tomamos una canci\u00f3n y la transformamos en una serie de caracter\u00edsticas como por ejemplo: el tempo el a\u00f1o el g\u00e9nero el pitch el nombre de la banda que la interpreta sucesivas caracter\u00edsticas... De esta forma podr\u00edamos representar una canci\u00f3n como un vector , donde cada columna representa el valor de cada una de estas caracter\u00edsticas. Donde asumimos que cada columna representa una dimensi\u00f3n distinta, una dimensi\u00f3n en la logitud de la canci\u00f3n, otra dimensi\u00f3n es la banda, otra es el g\u00e9nero, otra es el a\u00f1o. Entonces podemos pensar que la comparaci\u00f3n entre dos canciones pasar\u00eda de ser: Canci\u00f3n \"A\", escrita por banda X en el a\u00f1o 1990, del g\u00e9nero tanto puede llegar a parecerse a esta otra canci\u00f3n \"B\" de la banda Z en el a\u00f1o 2010 de g\u00e9nero tanto. ahora ser\u00eda algo como: [1, 1990, 13, 3.12] [45, 2010, 5 , 2.6] donde el primer valor representa el pitch, el segundo el a\u00f1o de lanzamiento, el tercero el tempo y el ultimo la duraci\u00f3n en minutos. Veamos como ahora pasamos de tener un problema cotidiano en una definici\u00f3n matem\u00e1tica. Ahora, si hacemos esto para todas las canciones que queramos, pasar\u00edamos a tener .... un mont\u00f3n de puntos en un mapa. Dado que aprendimos en Algebra [ Fear of Juan intesifies ] que podemos tomar la distancia entre 2 vectores. La forma m\u00e1s tradicional ser\u00eda utilizando la distancia euclidea. Enotnces, si frenamos un segundo en nuestro viaje astral nos podemos dar cuenta que pasamos de tener un mont\u00f3n de canciones a un mont\u00f3n de puntos en un plano matem\u00e1tico a los cuales puedo tomarle disntacias para encontrar los \"vecinos\". Es decir, que ya estamos muy cerca de poder lograr aplicar KNN, pero ahora nos falta dar una \"etiqueta\" a cada canci\u00f3n. Aunque seguimos con el problema de que no tenemos etiquetas para utilizar ... Que pasa si usamos como etiqueta de cada canci\u00f3n: \"le gusta al usuario\" \"no le gusta al usuario\" .... Ahora ... como sabemos que canciones le gusta al usuario y cuales no? bueno, este es el arte (lease m\u00e1gia oscura) que hacen las empresas para solucionar el denominado problema: cold start . En nuestro caso, simplemente le vamos a pedir al usuario que nos indique N cantidad de canciones que le gustaron o no. Otra forma es pedir al usuario que nos indique canciones que le gustan y tomar un random de canciones que vamos a considerar como que no le gustan, esta t\u00e9cnica es \u00fatil cuando tu dataset es tan grande que la probabilidad de que tomes un punto que pertenezca al conjunto de \"no inter\u00e9s\" es alta. Para resumir nuestro viaje astral: Vamos a tomar canciones y seg\u00fan caracter\u00edsticas num\u00e9ricas que tengan como son, el a\u00f1o de lanzamiento, la duraci\u00f3n de la canci\u00f3n, el pitch, entre otras obtendremos un vector num\u00e9rico que represente a cada canci\u00f3n. Luego, con ayuda del usuario tomaremos un par de canciones (vectores) y les pondremos la etiqueta de \"le gustan al usuario\". Acto seguido, tomaremos una muestra al azar de canciones no seleccionadas y diremos que estas \"no le gustan la usuario\". Esto es una heur\u00edstica simple que tomamos, podr\u00edamos tomar otras alternativas para conseguir etiquetas ciertas canciones como \"no le gustan\". Finalmente, utilizaremos KNN para \"predecir\" la etitqueta (le gusta o no le gusta) de las canciones que no est\u00e1n etiquetadas.","title":"Como voy a utilizar esto para recomendar:"},{"location":"projects/song-recommendation/#estrategia","text":"Ahora que tenemos una idea de hacia donde vamos y que herramientas vamos a utilizar, debemos plantearnos como vamos a encarar este desarrollo .","title":"Estrategia:"},{"location":"projects/song-recommendation/#separation-of-concerns","text":"Lo primero que hacemos es entender la separaci\u00f3n de \"dominios\" que tiene la app. En este caso, entendemos que nuestro desarrollo tiene las siguientes capas Notice Un Capas se refiere a el set de herramientas pertinentes a un area de nuestro problema el cual puede quedar separado del resto de nuestro problema. Por ejemplo: - el modelo predictor que utilicemos - el conjunto de modulos o funciones que utilizaremos para interactuar con el usuario - el conjunto de modulos o funciones que utilizaremos para obtener los datos Una vez que tenemos estos conceptos claros, por el siguiente paso.","title":"Separation of concerns:"},{"location":"projects/song-recommendation/#mvp-y-kiss","text":"Cuando hacemos un desarrollo pensamos en la m\u00ednima implementaci\u00f3n de funcionalidades que logran nuestro objetivos. En este caso la minima funcionalidad que queremos es: Dado un conjunto presetteado de canciones que tomaremos como (canciones que gustan al usuario) Generar un conjunto de 3 canciones a recomendar. Medir la calidad de nuestras recomendaciones. En la industria, MVP se refiere al producto minimo viable (MVP por sus siglas en ingles). Para nuestro caso, esto se traduce en las 3 funcionalidades mencionadas. Para generar este desarrollo intentaremos mantener la implementaci\u00f3n lo m\u00e1s sencilla posible y en base a un modelo funcional iremos modificando la soluci\u00f3n para hacerla mejor. Esto es el principio de KISS (Keep It Simpel ... Stupid).","title":"MVP y KISS:"},{"location":"projects/song-recommendation/#iteraciones-rapidas","text":"En el desarrollo de software hay que intentar acortar el loop de desarrollo, que comprende el ciclo desde crear una funcionalidad y obtener el feedback del usuario. En este caso, nuestro desarrollo se basa en generar c\u00f3digo, testear que puedo levantar datos, que puedo tomar informaci\u00f3n del usuario y que nuestro modelo efectivamente funciona y entrega buenos resultados.","title":"Iteraciones r\u00e1pidas:"},{"location":"projects/song-recommendation/#desarrollo","text":"El desarrollo de este sistema queda enteramente abierto a gusto del lector, en la siguiente secci\u00f3n simplemente iremos viendo un posible esquema de trabajo el cual plantea obtener el mayor apredizaje del ejercicio.","title":"Desarrollo:"},{"location":"projects/song-recommendation/#iteracion-1","text":"En la primera versi\u00f3n de nuestro sistema de recomendaci\u00f3n tendremos un programa que dado un input explicito (hardcoded) que representa las canciones que le gustan al usuario. Devolveremos una recomendaci\u00f3n, dicha recomendaci\u00f3n ser\u00e1 simplemente una selecci\u00f3n random de canciones. El esquema al finalizar esta etapa ser\u00e1: Al correr el programa no debemos ingresar datos. En pantalla nos aparecen las canciones preseleccionadas como que \"le gustan al usuario\" Nos aparecen las 5 recomendaciones de canciones. El programa imprime un score de que tan buena es la recomendaci\u00f3n. (vean la siguiente secci\u00f3n) Note El modelo b\u00e1sico que devuelve una selecci\u00f3n random es muy importante, dado que nos deja entender como interactuar con el modelo de recomendaci\u00f3n dentro de nuestra soluci\u00f3n. Entiendan en que parte del programa vamos a utilizar este algoritmo y su rol en el mismo.","title":"Iteraci\u00f3n 1"},{"location":"projects/song-recommendation/#como-testear-que-un-modelo-funciona","text":"Uno de los problemas emergentes por la naturaleza de nuestro proyecto es ... saber como determinar si realmente estamos dando una buena recomendaci\u00f3n. Esto es un problema recurrente de Machine Learning y es algo que extensamente ver\u00e1n en materias posteriores, por lo que para nuestro caso de uso haremos una heur\u00edstica simple. Para dar un score a nuestra recomendaci\u00f3n debemos plantear: que consideramos bueno en una recomendaci\u00f3n . Para nuestro ejemplo simple, podemos tomar que una recomendaci\u00f3n es buena si la energ\u00eda ( energy ) de la recomendaci\u00f3n son parecidas al promedio de las canciones que el usuario seleccion\u00f3 como \"que le gustan\". Dado que usualmente las personas tieneden a buscar un cierto tipo de m\u00fasica en particular, este ser\u00eda un buen primer approach. Notese que esta heur\u00edstica puede tornarse tan complicada como queramos. Finalemente deberiamos tener una especi de funci\u00f3n que tenga al siguiente firma: def is_good_recom(song, parametros extra que deseemos) -> bool: ... En este caso song ser\u00e1 el vector que represente la canci\u00f3n que recomienda el modelo y simplemente devolver\u00e1 el valor True si cumple con nuestro criterio de \"recomendaci\u00f3n buena\" y False caso contrario. Finalmente el score de la recomendaci\u00f3n completa (las 5 canciones) ser\u00e1 simplemnte la cantidad de aciertos ( True ) sobre la cantidad de canciones recomendadas (5/5 es la m\u00e1xima y 0/5 es la m\u00ednima).","title":"Como testear que un modelo funciona:"},{"location":"projects/song-recommendation/#iteracion-2","text":"En esta etapa nos centraremos en permitirle al usuario seleccionar canciones, es decir que queremos eliminar la partde hard coded y dejarle al usuario ingresar el nombre de la canci\u00f3n que desea. Al finalizar esta etapa tendremos: El usuario ingres el nombre exacto de una canci\u00f3n dentro de nuestra lista de canciones. El usuario repite el paso previo 5 veces El programa retorna una lista de 5 recomendaciones. obtenemos el score de nuestras recomendaciones. Nuevamente, utilziaremos el modelo de seleci\u00f3n al azar de canciones. Porque todav\u00eda no nos aporta valor, si el usuario es incapaz de interactuar con el sistema para ingresar que canciones le gusta... no importa que tan bueno sea nuestro modelo el usuario nunca lo podr\u00e1 usar. Es como construir un motor Formula 1 cuando todav\u00eda no ten\u00e9s ni un chasis donde montarlo. Concentrarse en permitir seleccionar las canciones de la lista de canciones, puntos extra si podemos seleccionar sin importar si ingresamos may\u00fasculas o no.","title":"Iteraci\u00f3n 2:"},{"location":"projects/song-recommendation/#iteracion-3","text":"En esta iteraci\u00f3n ahora si veremos de implementar una versi\u00f3n b\u00e1sica del algoritmo KNN para nuestro problema. Una versi\u00f3n de prueba se encuentra disponible en el repositorio de tutorial, bajo la secci\u00f3n \"proyectos/recomendador\". Al finalizar esta etapa tendremos: El usuario ingres el nombre exacto de una canci\u00f3n dentro de nuestra lista de canciones. El usuario repite el paso previo 5 veces El programa retorna una lista de 5 recomendaciones. obtenemos el score de nuestras recomendaciones. En esta etapa debemos ver mejoras en nuestro score final, de no ser as\u00ed modificar el K hasta lograr mejoras con respecto a valores previos.","title":"Iteraci\u00f3n 3:"},{"location":"projects/song-recommendation/#iteracion-4","text":"A esta altura tenemos un programa funciona, ahora podemos focalizarnos en hacerlo m\u00e1s f\u00e1cil de utilizar con mejoras como: Permitir al usuario ingresar parte del nombre de la canci\u00f3n y mostrarle posbles nombres y dejarlo seleccionar el que quiera. Mejorar nuestra impelmentaci\u00f3n de KNN utilizando un K m\u00e1s alto o teniendo encuenta la \"nota al final de la secci\u00f3n\". hacer m\u00e1s eficiente el algoritmo de b\u00fasqued de KNN que tenemos implementado en al versi\u00f3n b\u00e1sica. Muchas m\u00e1s. Note El KNN que vimos hasta ahora no tiene en cuenta la distancia entre el punto que estamos analizando y los \"vecinos\" que encontramos. Si tomamos 5 vecinos para determinar cual es la clase de un punto pero de los 5, 3 estan muy lejos del punto y 2 est\u00e1 casi pegados las chances son que la clase correcta sea la de los 2 puntos m\u00e1s pr\u00f3ximos aunque en nuestra versi\u00f3n diremos que la clase sea la de los 3 puntos m\u00e1s lejanos (asumiendo que los 3 puntos lejanos son de la misma clase y los 2 puntos cercanos son de otra clase distinta). Happy Coding!","title":"Iteraci\u00f3n 4:"},{"location":"recursion/intro/","text":"Recursi\u00f3n: Recursi\u00f3n es un concepto de programaci\u00f3n que tiene sus bases en matem\u00e1tica, se utiliza en ramas como matem\u00e1tica discreta, teor\u00eda de grafos, probabilidad y algebra entre otras. En la secundar\u00eda, habr\u00e1n escuchado a un profesor de lengua pedirles la definici\u00f3n de una palabra y reprocharlos porque utilizaron la propia palabra para definirla. En inform\u00e1tica esto es algo bueno y es lo que celebramos como recursividad ! Es un conepto importante dado que, cuando el problema presenta un car\u00e1cter recursivo, la soluciones son frecuentemente m\u00e1s sencillas de entender y de implementar. Este m\u00e9todo potente de dise\u00f1o y resoluci\u00f3n de problemas, tiene una relaci\u00f3n natural con la inducci\u00f3n matem\u00e1tica y por ello facilita la resoluci\u00f3n de problemas y dise\u00f1o de algoritmos. En criollo ... donde puedo encontrar ejemplos: En simples palabras, los programadores utilizamos recursi\u00f3n para plantear soluciones programaticas de forma m\u00e1s f\u00e1cil de leer. Ustedes conocen varios casos de recursi\u00f3n solo que no lo denominan de esa forma: - El problema de la ciudadan\u00eda :smile_face - La suma de n\u00fameros - La serie de Fibonacci La suma tal, como la uitilizan, puede definirse de manera recursiva: \\[A + B + C\\] en realidad se traduce en: \\[(A + B) + C\\] es decir que primero resolvemos la suma entre 2 n\u00fameros y luego decimos que el resultado lo sumamos al tecero. Lo que en verdad hacemos es simplemente decirnos la siguiente definici\u00f3n de suma: \\[Suma_n\\] donde n representa la cantidad de terminos que estamos queriendo sumar. Caso base : n = 2 \\[Suma(a, b) = a + b\\] Caso recursivo : n > 2 \\[Suma_n(a, b, c, ...) = Suma(Suma(Suma(a, b), c)..)\\] Recursividad no es m\u00e1s que funciones que dentro del cuerpo se llamana a si mismas! Info La llamada de una funci\u00f3n a si misma dentro de la propia definici\u00f3n se denomina llamado recursivo Problemas modelos: Veamos algunos problemas b\u00e1sicos que nos ayudar\u00e1n a ver la estructura que comparten los problemas recursivos. Fibonacci: La secuencia de Fibonacci se define utilizando la propia definici\u00f3n. De forma que: Fibonacci(1) = 1 Fibonacci(2) = 1 Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) Este tipo de problema, en el que la definici\u00f3n del mismo se puede expersar de forma recursiva es f\u00e1cilmente traducible a c\u00f3digo dado que entendemos donde est\u00e1 el llamado recursivo def fibo ( n : int ) -> int : ''' Args: n: (int) representa el indice de la secuencia que se espera obtener. Return: (int) el valor de dicho indice. ''' # primero escribimos los casos base if n == 1 : return 1 if n == 2 : return 1 return fibo ( n - 1 ) + fibo ( n - 2 ) Warning Como ya saben, la forma recursiva de Fibonacci aunque elegante en su expresi\u00f3n es muy ineficiente. Suma de lista: Escriba una funci\u00f3n que dada una lista de enteros retorne el valor de la suma de cada uno de ellos. La funci\u00f3n no puede usar: sum ni for y debe de tener no m\u00e1s de 5 lineas (docstring y lineas vacias no cuentan). from typing import List def sum_list ( a_list : List [ int ]) -> int : ''' Args: - a_list:(List[int]) representa la lista de enteros Returns: (int) el valor de la suma de los elementos de la lista. ''' # Defino los casos base if len ( a_list ) == 0 : return 0 if len ( a_list ) <= 2 : return a_list [ 0 ] + a_list [ 1 ] if len ( a_list ) == 2 else a_list [ 0 ] # llamado recursivo return a_list [ 0 ] + sum_list ( a_list [ 1 :]) Como encarar los problemas: Generalmente los problemas de recursi\u00f3n tiene 3 estructuras b\u00e1sicas. Lo m\u00e1s importante es encontrar la parte recursiva del problema, por ejemplo: - Si el problema trata sobre listas, recordar que una lista tiene un definici\u00f3n recursiva del tipo: \"una lista es un elemento seguido de una sublista\" - Si el problema nos presenta un string , tambi\u00e9n podemos entenderlo como un caracter seguido de un substring. - Si el enunciado trata sobre n\u00fameros, escribir el pseudo algoritmo que nos piden para encontrar la parte recursiva (ejemplo: Fibonacci). Dentro de las estructuras b\u00e1sicas encontramos: Recursi\u00f3n sobre la definici\u00f3n del problema. Estos son los casos como fibonacci, donde la recursi\u00f3n est\u00e1 explicita en la definici\u00f3n del problema en si. Recursi\u00f3n sobre la estructura de los par\u00e1metros. Estos son los casos donde nos pasan un tipo de argumento que tiene una definici\u00f3n recursiva y sobre la que tenemos que moldear la soluci\u00f3n como el caso de sumar los elementos de una lista. Recursi\u00f3n para backtracking. Estos problemas son normalmente los que requieren que encontremos todas las posibilidades de una secuencia o satisfacer los constrains de un problema. [Mas info en la secci\u00f3n avanzada] Luego de encontrar la estructura, en conveniente definir el/los casos base del problema. Generalemnte este paso determina el tipo de soluci\u00f3n que tendremos. Recordar que en una soluci\u00f3n recursiva, siempre tenemos un camino de \"ida\" hacia el caso base y un camino de \"vuelta\" desde el caso base. Muchas veces depende el problema debemos hacer cosas en el camino de \"ida\" y otras en el camino de \"vuelta\" pero esto viene determinado por como pensemos el caso base. Info Lo que hagamos antes del llamado recursivo ocurre en nuestro camino \"hacia\" el caso base y lo que hagamos luego del llamado recursivo ocurre en el camino \"de retorno\" desde el caso base.","title":"Introducci\u00f3n"},{"location":"recursion/intro/#recursion","text":"Recursi\u00f3n es un concepto de programaci\u00f3n que tiene sus bases en matem\u00e1tica, se utiliza en ramas como matem\u00e1tica discreta, teor\u00eda de grafos, probabilidad y algebra entre otras. En la secundar\u00eda, habr\u00e1n escuchado a un profesor de lengua pedirles la definici\u00f3n de una palabra y reprocharlos porque utilizaron la propia palabra para definirla. En inform\u00e1tica esto es algo bueno y es lo que celebramos como recursividad ! Es un conepto importante dado que, cuando el problema presenta un car\u00e1cter recursivo, la soluciones son frecuentemente m\u00e1s sencillas de entender y de implementar. Este m\u00e9todo potente de dise\u00f1o y resoluci\u00f3n de problemas, tiene una relaci\u00f3n natural con la inducci\u00f3n matem\u00e1tica y por ello facilita la resoluci\u00f3n de problemas y dise\u00f1o de algoritmos.","title":"Recursi\u00f3n:"},{"location":"recursion/intro/#en-criollo-donde-puedo-encontrar-ejemplos","text":"En simples palabras, los programadores utilizamos recursi\u00f3n para plantear soluciones programaticas de forma m\u00e1s f\u00e1cil de leer. Ustedes conocen varios casos de recursi\u00f3n solo que no lo denominan de esa forma: - El problema de la ciudadan\u00eda :smile_face - La suma de n\u00fameros - La serie de Fibonacci La suma tal, como la uitilizan, puede definirse de manera recursiva: \\[A + B + C\\] en realidad se traduce en: \\[(A + B) + C\\] es decir que primero resolvemos la suma entre 2 n\u00fameros y luego decimos que el resultado lo sumamos al tecero. Lo que en verdad hacemos es simplemente decirnos la siguiente definici\u00f3n de suma: \\[Suma_n\\] donde n representa la cantidad de terminos que estamos queriendo sumar. Caso base : n = 2 \\[Suma(a, b) = a + b\\] Caso recursivo : n > 2 \\[Suma_n(a, b, c, ...) = Suma(Suma(Suma(a, b), c)..)\\] Recursividad no es m\u00e1s que funciones que dentro del cuerpo se llamana a si mismas! Info La llamada de una funci\u00f3n a si misma dentro de la propia definici\u00f3n se denomina llamado recursivo","title":"En criollo ... donde puedo encontrar ejemplos:"},{"location":"recursion/intro/#problemas-modelos","text":"Veamos algunos problemas b\u00e1sicos que nos ayudar\u00e1n a ver la estructura que comparten los problemas recursivos.","title":"Problemas modelos:"},{"location":"recursion/intro/#fibonacci","text":"La secuencia de Fibonacci se define utilizando la propia definici\u00f3n. De forma que: Fibonacci(1) = 1 Fibonacci(2) = 1 Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2) Este tipo de problema, en el que la definici\u00f3n del mismo se puede expersar de forma recursiva es f\u00e1cilmente traducible a c\u00f3digo dado que entendemos donde est\u00e1 el llamado recursivo def fibo ( n : int ) -> int : ''' Args: n: (int) representa el indice de la secuencia que se espera obtener. Return: (int) el valor de dicho indice. ''' # primero escribimos los casos base if n == 1 : return 1 if n == 2 : return 1 return fibo ( n - 1 ) + fibo ( n - 2 ) Warning Como ya saben, la forma recursiva de Fibonacci aunque elegante en su expresi\u00f3n es muy ineficiente.","title":"Fibonacci:"},{"location":"recursion/intro/#suma-de-lista","text":"Escriba una funci\u00f3n que dada una lista de enteros retorne el valor de la suma de cada uno de ellos. La funci\u00f3n no puede usar: sum ni for y debe de tener no m\u00e1s de 5 lineas (docstring y lineas vacias no cuentan). from typing import List def sum_list ( a_list : List [ int ]) -> int : ''' Args: - a_list:(List[int]) representa la lista de enteros Returns: (int) el valor de la suma de los elementos de la lista. ''' # Defino los casos base if len ( a_list ) == 0 : return 0 if len ( a_list ) <= 2 : return a_list [ 0 ] + a_list [ 1 ] if len ( a_list ) == 2 else a_list [ 0 ] # llamado recursivo return a_list [ 0 ] + sum_list ( a_list [ 1 :])","title":"Suma de lista:"},{"location":"recursion/intro/#como-encarar-los-problemas","text":"Generalmente los problemas de recursi\u00f3n tiene 3 estructuras b\u00e1sicas. Lo m\u00e1s importante es encontrar la parte recursiva del problema, por ejemplo: - Si el problema trata sobre listas, recordar que una lista tiene un definici\u00f3n recursiva del tipo: \"una lista es un elemento seguido de una sublista\" - Si el problema nos presenta un string , tambi\u00e9n podemos entenderlo como un caracter seguido de un substring. - Si el enunciado trata sobre n\u00fameros, escribir el pseudo algoritmo que nos piden para encontrar la parte recursiva (ejemplo: Fibonacci). Dentro de las estructuras b\u00e1sicas encontramos: Recursi\u00f3n sobre la definici\u00f3n del problema. Estos son los casos como fibonacci, donde la recursi\u00f3n est\u00e1 explicita en la definici\u00f3n del problema en si. Recursi\u00f3n sobre la estructura de los par\u00e1metros. Estos son los casos donde nos pasan un tipo de argumento que tiene una definici\u00f3n recursiva y sobre la que tenemos que moldear la soluci\u00f3n como el caso de sumar los elementos de una lista. Recursi\u00f3n para backtracking. Estos problemas son normalmente los que requieren que encontremos todas las posibilidades de una secuencia o satisfacer los constrains de un problema. [Mas info en la secci\u00f3n avanzada] Luego de encontrar la estructura, en conveniente definir el/los casos base del problema. Generalemnte este paso determina el tipo de soluci\u00f3n que tendremos. Recordar que en una soluci\u00f3n recursiva, siempre tenemos un camino de \"ida\" hacia el caso base y un camino de \"vuelta\" desde el caso base. Muchas veces depende el problema debemos hacer cosas en el camino de \"ida\" y otras en el camino de \"vuelta\" pero esto viene determinado por como pensemos el caso base. Info Lo que hagamos antes del llamado recursivo ocurre en nuestro camino \"hacia\" el caso base y lo que hagamos luego del llamado recursivo ocurre en el camino \"de retorno\" desde el caso base.","title":"Como encarar los problemas:"},{"location":"setup/new_project/","text":"Nuevo projecto: En la materia veremos muchos trabajos pr\u00e1cticos, gu\u00edas y ejercicios que podemos hacer. Pero antes de comenzar con este camino, es razonable cuestionarse como vamos a organizar todos estos archivos de modo que sean entendibles y f\u00e1cilmente reproducibles por todos nuestros compa\u00f1eros y profesores. Info Es importante remarcar que la forma de organizaci\u00f3n que aprenderemos aqu\u00ed es la que se espera para la materia pero existen muchas formas de llevar una organizaci\u00f3n de sus proyectos. Hacemos esto para estandarizar la forma en la que todos tenemos nuestros entornos. Alert A modo de ejemplo, pero no limitante, en este documento imaginaremos los pasos para crear un proyecto donde tendremos nuestras resoluciones de las gu\u00edas. El mismo proceso se puede utilizar para trabajos pr\u00e1cticos individuales u otras actividades. En caso de hacer trabajos pr\u00e1cticos grupales, es preferible ver la secci\u00f3n dedicada a ese proceso bajo el nombre \"Proyectos grupales\". 1. Todo proyecto requiere un versionado: No importa si utilizamos Github u otra plataforma (hasta si no utilizamos ... aunque esto no ser\u00eda lo esperado). Es importante que nos acostumbremos a crear un proyecto git cuando queremos iniciar alg\u00fan tipo de programa. En las primeras clases veremos un poco sobre los comandos b\u00e1sicos de git , que es git y porque es importante que lo usemos. Pero en esta secci\u00f3n nos interesa entender la secuencia de pasos para tener un proyecto . Para nuestro ejemplo, crearemos una carpeta para guardar nuestras resoluciones de los problemas de las gu\u00edas. Alert Recuerden no utilizar espacios, caracteres especiales ni tildes en los nombres de archivos o carpetas! Crear una carpeta. Esta ser\u00e1 la base (muchas veces denominada root ) de nuestro proyecto. Como hacerlo desde terminal cd path/a/tu/carpeta/principal mkdir guia_de_ejercicios En este ejemplo, primero nos dirigimos hacia la carpeta principal donde queremos crear al nueva (por ejemplo si tuvieran una carpeta llamada udesa dentro de su escritorio reemplazar\u00edan el path del ejemplo por el path hacia esa carpeta). Luego creamos la carpeta llamada guia_de_ejercicios en este path . Abrir una terminal, si es que no hicimos el paso previo desde una , y nos posicionamos dentro de la carpeta previamente creada donde escribimos el comando git init . En al terminal, parados dentro de guia_de_ejercicios git init Con este comando estaremos inicializando nuestro nuevo proyecto git Info Todos los pasos a continuaci\u00f3n son pensados para subir nuestro repositorio (es como se llaman los proyectos en git) a un servidor dentro de github. Esto ser\u00eda para poder acceder a nuestro c\u00f3digo desde otra computadora, para darle acceso a un profesor y que pueda ver nuestro c\u00f3digo o simplemente a modo de backup. Abrimos un browser y nos dirigimos a Github e iniciamos sesi\u00f3n. Una vez dentro de la plataforma veremos algo como lo siguiente, haremos click en \"new\" (bot\u00f3n verde): En la siguiente pantalla vamos a completar con los datos que correspondan. (los campos marcados con aster\u00edsco son obligatorios) Alert Es importante seleccionar que el repositorio sea privado . No es necesario que el repositorio se llame igual que nuestra carpeta. No seleccionaremos ninguna de las opciones marcadas bajo \"initialize this repository with\" dado que lo haremos manualmente. Veamos como queda para nuestro ejemplo: Finalmente vamos al fondo de la p\u00e1gina y clickeamos el bot\u00f3n de crear. Ahora veremos la p\u00e1gina principal de nuestro nuevo repositorio vac\u00edo. Notaremos que en la parte superios, en azul, dir\u00e1: nuestro nombre de usuario / nombre del repositorio . Si seguimos para abajo, encontraremos varios tabs pero por el momento solo nos interesa el que dice code . Ahora, tenemos un repositorio creado en Github y tenemos un repositorio creado en nuestra computadora todo lo que falta es comunicarlos. Abrimos Visual Studio Code en la carpeta que creamos en el paso 1. Creamos un nuevo archivo que se llame readme.md y escribimos lo siguiente reemplazando <placeholder> por el valor que coresponda. # <T\u00edtulo del repositorio> Autor: <nombre> ## Descripci\u00f3n: <brebve descripci\u00f3n de que se trata este repositorio> ## How to run: esta secci\u00f3n es opci\u00f3nal, se trata de que pasos debemos seguir para ejecutar el programa. por ejemplo: 1. Descargar repositorio 2. Desde una terminal con Python 3.8 o superior ejecutar: `python mi_super_programa.py` Abrimos una terminal integrada a vscode (en la barra surior del editor ver\u00e1n la opci\u00f3n de crear una terminal). A\u00f1adimos el archivo a git (le decimos al sistema de versionado que este archivo require ser guardado): git add readme.md Ahora hacemos un commit que vendr\u00eda a ser una forma de decirle a git \"el estado del repositorio como est\u00e1 ahora quiero guardarlo como un snapshot por si me mando alguna macana puedo volver a este estado\". git commit -m 'esto es un comentario del snapshot, debe ser corto' Ahora tenemos que avisarle a Github de que hicimos cambios en nuestro repositorio. Para ello primero vamos a linkear ambos repositorios (el local y el remoto) git remote add origin https://github.com/levensworth/ejercicios_udesa_pc.git Noten que este comando est\u00e1 disponible en la vista de nuestro repositorio de github. Es importante que tomen la url que les aparece a cada uno dado que tiene que apuntar a su repositorio, si ponen la url del ejemplo no funcionar\u00e1 . Ahora que los repos estan linkeados, pasamos a hacer push de nuestros cambios locales al repositorio de Github: git push -u origin master En este caso, el uso de argumento -u origin master es simplemente porque es la primera vez que ejecutamos el comando desde este repositorio. Si entramos nuevamente a nuestro repositorio en Github veremos que ahora aparece el mensaje anterior! Como seguir luego del primer commit: De ahora en m\u00e1s, cada vez que hagamos cambios y lleguemos a un punto donde tenemos algo que nos parece importante guardar debemos recordar hacer: git add path/al/archivo/que_queremos git add path/a/otro/archivo/interesante git commit -m 'mensaje para recordar que hicimos' git push 2. Virtual environment ... for the win: Python se nutre como lenguaje de los m\u00f3dulos creados por usuarios. M\u00e1s adelante veremos esto en detalle, pero para fines pr\u00e1cticos un m\u00f3dulo es simplemente un c\u00f3digo que alguien m\u00e1s escribi\u00f3 y est\u00e1 disponible para que otros puedan utilizarlo. Pero como estos m\u00f3dulos tienen versiones y la gente escribe nuevas versiones r\u00e1pidamente, no toda versi\u00f3n de un m\u00f3dulo es compatible con otros m\u00f3dulos. Por esta raz\u00f3n generamos ambientes separados para cada repositorio de esta forma si alg\u00fan m\u00f3dulo require una versi\u00f3n espec\u00edfica que rompe con otro proyectos, podemos evitar ese conflicto. Info En caso de tener problemas con esta secci\u00f3n por favor referirse a la documentaci\u00f3n oficial en https://code.visualstudio.com/docs/python/environments Abrimos nuestro proyecto desde vscode. Abrimos una terminal integrada de vscode. Dentro de la terminal escribirmos en Mac python3 -m venv .venv en widnows python -m venv .venv Esto va a generar una nueva carpeta dentro de nuestro proyecto llamada .venv , esta carpeta contiene una versi\u00f3n de python que utilizaremos exclusivamente dentro de este proyecto. Para avisarle a vscode que queremos utilizar este nuevo python y no el que instalamos global dentro de nuestra computadora haremos lo siguiente. Abrimos la command palette (en Mac apretamos command + shift + p y en Windows ctrl + shift + p ) Luego escribirmos en la barra de b\u00fasqueda: Python: Select Interpreter y hacemos click sobre la opci\u00f3n Ahora en la nueva barra de b\u00fasqueda (o en las opciones sugeridas) debemos seleccionar la opci\u00f3n que se refiera a nuestra nueva carpeta. Aqu\u00ed debemos encontrar una opci\u00f3n que se parezca a ./.venv/bin/python y seleccionarlo. Para corroborar que hicimos todo bien, abrir una terminal integrada en vscode y notar que debe tener el prefijo (.venv) anunciando que estamos utilizando un entorno virtual. 3. Finalmente... escribir c\u00f3digo: Ahora si, tr\u00e1s mucho esfuerzo tenemos: Un repositorio que mantiene nuestros cambios Un entorno virtual para evitar problemas con otros proyectos Un editor con colores lindos y que grita soy geek Siguiendo nuestro ejemplo, ahora queremos comenzar a resolver ejercicios de las gu\u00edas. supongamos que comenzamos resolviendo el ejercicio 5 de la gu\u00eda 1. solucion_guia1_e_5.py num1 , num2 = 2 , 2.5 answer = num1 + num2 print ( answer ) Probamos si esto funcionar corriendo el programa anterior ejecutando el siguiente comando desde la terminal integrada python solucion_guia1_e_5.py y deber\u00edamos ver el resultado esperado. Ahora ya que logramos este importante resultado, lo que haremos es guardarlo en nuestro repositorio. Para eso, volvemos nuevamente a la terminal integrada de vscode y ejecutamos los siguientes comandos git add solucion_guia1_e_5.py con esto indicamos que este archivo queremos que sea parte del nuevo snapshot git commit -m 'solucion ejercicio 5 guia 1' con esto hacemos el snapshot del archivo en nuestro repositorio git push con esto lo subimos a Github Luego de todo esto, nos damos cuenta que cometimos un error en la soluci\u00f3n y escribimos un 2.5 donde ir\u00eda 2 as\u00ed que procedemos a hacer el fix. solucion_guia1_e_5.py num1 , num2 = 2 , 2 answer = num1 + num2 print ( answer ) Ahora si, con el c\u00f3digo correcto. volvemos a pushear el cambio a nuestro repositorio, con los mismos 3 comandos previos. Con eso, concluye la introducci\u00f3n a como trabajar con un repositorio y utilizar el editor de texto para hacer un setup de su entorno.","title":"Nuevo Proyecto"},{"location":"setup/new_project/#nuevo-projecto","text":"En la materia veremos muchos trabajos pr\u00e1cticos, gu\u00edas y ejercicios que podemos hacer. Pero antes de comenzar con este camino, es razonable cuestionarse como vamos a organizar todos estos archivos de modo que sean entendibles y f\u00e1cilmente reproducibles por todos nuestros compa\u00f1eros y profesores. Info Es importante remarcar que la forma de organizaci\u00f3n que aprenderemos aqu\u00ed es la que se espera para la materia pero existen muchas formas de llevar una organizaci\u00f3n de sus proyectos. Hacemos esto para estandarizar la forma en la que todos tenemos nuestros entornos. Alert A modo de ejemplo, pero no limitante, en este documento imaginaremos los pasos para crear un proyecto donde tendremos nuestras resoluciones de las gu\u00edas. El mismo proceso se puede utilizar para trabajos pr\u00e1cticos individuales u otras actividades. En caso de hacer trabajos pr\u00e1cticos grupales, es preferible ver la secci\u00f3n dedicada a ese proceso bajo el nombre \"Proyectos grupales\".","title":"Nuevo projecto:"},{"location":"setup/new_project/#1-todo-proyecto-requiere-un-versionado","text":"No importa si utilizamos Github u otra plataforma (hasta si no utilizamos ... aunque esto no ser\u00eda lo esperado). Es importante que nos acostumbremos a crear un proyecto git cuando queremos iniciar alg\u00fan tipo de programa. En las primeras clases veremos un poco sobre los comandos b\u00e1sicos de git , que es git y porque es importante que lo usemos. Pero en esta secci\u00f3n nos interesa entender la secuencia de pasos para tener un proyecto . Para nuestro ejemplo, crearemos una carpeta para guardar nuestras resoluciones de los problemas de las gu\u00edas. Alert Recuerden no utilizar espacios, caracteres especiales ni tildes en los nombres de archivos o carpetas! Crear una carpeta. Esta ser\u00e1 la base (muchas veces denominada root ) de nuestro proyecto. Como hacerlo desde terminal cd path/a/tu/carpeta/principal mkdir guia_de_ejercicios En este ejemplo, primero nos dirigimos hacia la carpeta principal donde queremos crear al nueva (por ejemplo si tuvieran una carpeta llamada udesa dentro de su escritorio reemplazar\u00edan el path del ejemplo por el path hacia esa carpeta). Luego creamos la carpeta llamada guia_de_ejercicios en este path . Abrir una terminal, si es que no hicimos el paso previo desde una , y nos posicionamos dentro de la carpeta previamente creada donde escribimos el comando git init . En al terminal, parados dentro de guia_de_ejercicios git init Con este comando estaremos inicializando nuestro nuevo proyecto git Info Todos los pasos a continuaci\u00f3n son pensados para subir nuestro repositorio (es como se llaman los proyectos en git) a un servidor dentro de github. Esto ser\u00eda para poder acceder a nuestro c\u00f3digo desde otra computadora, para darle acceso a un profesor y que pueda ver nuestro c\u00f3digo o simplemente a modo de backup. Abrimos un browser y nos dirigimos a Github e iniciamos sesi\u00f3n. Una vez dentro de la plataforma veremos algo como lo siguiente, haremos click en \"new\" (bot\u00f3n verde): En la siguiente pantalla vamos a completar con los datos que correspondan. (los campos marcados con aster\u00edsco son obligatorios) Alert Es importante seleccionar que el repositorio sea privado . No es necesario que el repositorio se llame igual que nuestra carpeta. No seleccionaremos ninguna de las opciones marcadas bajo \"initialize this repository with\" dado que lo haremos manualmente. Veamos como queda para nuestro ejemplo: Finalmente vamos al fondo de la p\u00e1gina y clickeamos el bot\u00f3n de crear. Ahora veremos la p\u00e1gina principal de nuestro nuevo repositorio vac\u00edo. Notaremos que en la parte superios, en azul, dir\u00e1: nuestro nombre de usuario / nombre del repositorio . Si seguimos para abajo, encontraremos varios tabs pero por el momento solo nos interesa el que dice code . Ahora, tenemos un repositorio creado en Github y tenemos un repositorio creado en nuestra computadora todo lo que falta es comunicarlos. Abrimos Visual Studio Code en la carpeta que creamos en el paso 1. Creamos un nuevo archivo que se llame readme.md y escribimos lo siguiente reemplazando <placeholder> por el valor que coresponda. # <T\u00edtulo del repositorio> Autor: <nombre> ## Descripci\u00f3n: <brebve descripci\u00f3n de que se trata este repositorio> ## How to run: esta secci\u00f3n es opci\u00f3nal, se trata de que pasos debemos seguir para ejecutar el programa. por ejemplo: 1. Descargar repositorio 2. Desde una terminal con Python 3.8 o superior ejecutar: `python mi_super_programa.py` Abrimos una terminal integrada a vscode (en la barra surior del editor ver\u00e1n la opci\u00f3n de crear una terminal). A\u00f1adimos el archivo a git (le decimos al sistema de versionado que este archivo require ser guardado): git add readme.md Ahora hacemos un commit que vendr\u00eda a ser una forma de decirle a git \"el estado del repositorio como est\u00e1 ahora quiero guardarlo como un snapshot por si me mando alguna macana puedo volver a este estado\". git commit -m 'esto es un comentario del snapshot, debe ser corto' Ahora tenemos que avisarle a Github de que hicimos cambios en nuestro repositorio. Para ello primero vamos a linkear ambos repositorios (el local y el remoto) git remote add origin https://github.com/levensworth/ejercicios_udesa_pc.git Noten que este comando est\u00e1 disponible en la vista de nuestro repositorio de github. Es importante que tomen la url que les aparece a cada uno dado que tiene que apuntar a su repositorio, si ponen la url del ejemplo no funcionar\u00e1 . Ahora que los repos estan linkeados, pasamos a hacer push de nuestros cambios locales al repositorio de Github: git push -u origin master En este caso, el uso de argumento -u origin master es simplemente porque es la primera vez que ejecutamos el comando desde este repositorio. Si entramos nuevamente a nuestro repositorio en Github veremos que ahora aparece el mensaje anterior!","title":"1. Todo proyecto requiere un versionado:"},{"location":"setup/new_project/#como-seguir-luego-del-primer-commit","text":"De ahora en m\u00e1s, cada vez que hagamos cambios y lleguemos a un punto donde tenemos algo que nos parece importante guardar debemos recordar hacer: git add path/al/archivo/que_queremos git add path/a/otro/archivo/interesante git commit -m 'mensaje para recordar que hicimos' git push","title":"Como seguir luego del primer commit:"},{"location":"setup/new_project/#2-virtual-environment-for-the-win","text":"Python se nutre como lenguaje de los m\u00f3dulos creados por usuarios. M\u00e1s adelante veremos esto en detalle, pero para fines pr\u00e1cticos un m\u00f3dulo es simplemente un c\u00f3digo que alguien m\u00e1s escribi\u00f3 y est\u00e1 disponible para que otros puedan utilizarlo. Pero como estos m\u00f3dulos tienen versiones y la gente escribe nuevas versiones r\u00e1pidamente, no toda versi\u00f3n de un m\u00f3dulo es compatible con otros m\u00f3dulos. Por esta raz\u00f3n generamos ambientes separados para cada repositorio de esta forma si alg\u00fan m\u00f3dulo require una versi\u00f3n espec\u00edfica que rompe con otro proyectos, podemos evitar ese conflicto. Info En caso de tener problemas con esta secci\u00f3n por favor referirse a la documentaci\u00f3n oficial en https://code.visualstudio.com/docs/python/environments Abrimos nuestro proyecto desde vscode. Abrimos una terminal integrada de vscode. Dentro de la terminal escribirmos en Mac python3 -m venv .venv en widnows python -m venv .venv Esto va a generar una nueva carpeta dentro de nuestro proyecto llamada .venv , esta carpeta contiene una versi\u00f3n de python que utilizaremos exclusivamente dentro de este proyecto. Para avisarle a vscode que queremos utilizar este nuevo python y no el que instalamos global dentro de nuestra computadora haremos lo siguiente. Abrimos la command palette (en Mac apretamos command + shift + p y en Windows ctrl + shift + p ) Luego escribirmos en la barra de b\u00fasqueda: Python: Select Interpreter y hacemos click sobre la opci\u00f3n Ahora en la nueva barra de b\u00fasqueda (o en las opciones sugeridas) debemos seleccionar la opci\u00f3n que se refiera a nuestra nueva carpeta. Aqu\u00ed debemos encontrar una opci\u00f3n que se parezca a ./.venv/bin/python y seleccionarlo. Para corroborar que hicimos todo bien, abrir una terminal integrada en vscode y notar que debe tener el prefijo (.venv) anunciando que estamos utilizando un entorno virtual.","title":"2. Virtual environment ... for the win:"},{"location":"setup/new_project/#3-finalmente-escribir-codigo","text":"Ahora si, tr\u00e1s mucho esfuerzo tenemos: Un repositorio que mantiene nuestros cambios Un entorno virtual para evitar problemas con otros proyectos Un editor con colores lindos y que grita soy geek Siguiendo nuestro ejemplo, ahora queremos comenzar a resolver ejercicios de las gu\u00edas. supongamos que comenzamos resolviendo el ejercicio 5 de la gu\u00eda 1. solucion_guia1_e_5.py num1 , num2 = 2 , 2.5 answer = num1 + num2 print ( answer ) Probamos si esto funcionar corriendo el programa anterior ejecutando el siguiente comando desde la terminal integrada python solucion_guia1_e_5.py y deber\u00edamos ver el resultado esperado. Ahora ya que logramos este importante resultado, lo que haremos es guardarlo en nuestro repositorio. Para eso, volvemos nuevamente a la terminal integrada de vscode y ejecutamos los siguientes comandos git add solucion_guia1_e_5.py con esto indicamos que este archivo queremos que sea parte del nuevo snapshot git commit -m 'solucion ejercicio 5 guia 1' con esto hacemos el snapshot del archivo en nuestro repositorio git push con esto lo subimos a Github Luego de todo esto, nos damos cuenta que cometimos un error en la soluci\u00f3n y escribimos un 2.5 donde ir\u00eda 2 as\u00ed que procedemos a hacer el fix. solucion_guia1_e_5.py num1 , num2 = 2 , 2 answer = num1 + num2 print ( answer ) Ahora si, con el c\u00f3digo correcto. volvemos a pushear el cambio a nuestro repositorio, con los mismos 3 comandos previos. Con eso, concluye la introducci\u00f3n a como trabajar con un repositorio y utilizar el editor de texto para hacer un setup de su entorno.","title":"3. Finalmente... escribir c\u00f3digo:"},{"location":"setup/vs-code/","text":"Visual Studio Code En pasos previos, vimos como descargar el editor de texto visual studio code (vs code para los amigos). Esta es una potente herramienta que nos ayudar\u00e1 a desarrollar con m\u00e1s facilidad las actividades de un programador, como reiteradas veces dijimos no es necesario ning\u00fan programa especial para poder programar ... pero ayuda tener la herramienta que nos haga el trabajo m\u00e1s f\u00e1cil. Ahora bien, por si solo, vscode no ofrece mucha ayuda. Dado que fue pensado de forma modular, el editor viene con poca funcionalidad y debemos descargar los plugins correctos para facilitarnos el trabajo. En esta secci\u00f3n veremos cuales son algunos de estos plugins y como configurarlos para nuestra preferencia... Python & Pylance (Language servers): Los primeros 2 plug-ins que veremos son parte de lo que se denomina language server . Son peque\u00f1os programas que corren en un segundo plano y nos ayudan interpretando lo que escribimos en el editor. Son los encargados de mostrarnos que alg\u00fan nombre pertence a las palabras reservadas de Python o nos muestran con highlights la estructura de nuestro c\u00f3digo (a.k.a los colores lindos en el editor del profe). Para obtener dicho resultado seguiremos los siguientes pasos: Abrir vscode. En la barra lateral ubicar la opci\u00f3n de extensiones y clickear. En la barra de b\u00fasqueda escribir: Python y seleccionar el primer resultado. En este punto deberiamos ver la p\u00e1gina principal del plugin: Hacemos click sobre install (en el caso de la imagen dice uninstall por ya estar instalado). Nuevamente, vamos a la barra de b\u00fasqueda en extensiones y buscamos por Pylance Nuevamente descargamos la opci\u00f3n siguiente: Ahora si, nos encontramos con un editor listo para trabajar en proyectos relacionados con Python.","title":"Editor"},{"location":"setup/vs-code/#visual-studio-code","text":"En pasos previos, vimos como descargar el editor de texto visual studio code (vs code para los amigos). Esta es una potente herramienta que nos ayudar\u00e1 a desarrollar con m\u00e1s facilidad las actividades de un programador, como reiteradas veces dijimos no es necesario ning\u00fan programa especial para poder programar ... pero ayuda tener la herramienta que nos haga el trabajo m\u00e1s f\u00e1cil. Ahora bien, por si solo, vscode no ofrece mucha ayuda. Dado que fue pensado de forma modular, el editor viene con poca funcionalidad y debemos descargar los plugins correctos para facilitarnos el trabajo. En esta secci\u00f3n veremos cuales son algunos de estos plugins y como configurarlos para nuestra preferencia...","title":"Visual Studio Code"},{"location":"setup/vs-code/#python-pylance-language-servers","text":"Los primeros 2 plug-ins que veremos son parte de lo que se denomina language server . Son peque\u00f1os programas que corren en un segundo plano y nos ayudan interpretando lo que escribimos en el editor. Son los encargados de mostrarnos que alg\u00fan nombre pertence a las palabras reservadas de Python o nos muestran con highlights la estructura de nuestro c\u00f3digo (a.k.a los colores lindos en el editor del profe). Para obtener dicho resultado seguiremos los siguientes pasos: Abrir vscode. En la barra lateral ubicar la opci\u00f3n de extensiones y clickear. En la barra de b\u00fasqueda escribir: Python y seleccionar el primer resultado. En este punto deberiamos ver la p\u00e1gina principal del plugin: Hacemos click sobre install (en el caso de la imagen dice uninstall por ya estar instalado). Nuevamente, vamos a la barra de b\u00fasqueda en extensiones y buscamos por Pylance Nuevamente descargamos la opci\u00f3n siguiente: Ahora si, nos encontramos con un editor listo para trabajar en proyectos relacionados con Python.","title":"Python &amp; Pylance (Language servers):"}]}